JDBC
###################
	==> JDBC Introduction
	==> JDBC Architecture
	==> JDBC Drivers
	==> Hello World 
	==> JDBC Statements, Preparedstatement, ResultSet types
	==>DAO DTO design pattern
	==> CRUD Operations
	==> Calling Stored Procedures
	==> Scrollable resultSet
	==> Getting resultset meta data
	==> Auto key generation
	==> Batch Processing
	==> Transactions

JDBC Introduction
==================

	What is JDBC?
	-------------
		==>API to intract with RDBMS

		==>JDBC API has two major packages:- java.sql.* and javax.sql.*

 	JDBC Architecture
 	-----------------
	Driver
	---------
		==>Ensure consistent and uniform access to any database
		==>Driver act as a translator bw client request and database access

	Driver Manager
	--------------
		==>Class that manages establishment of connection
		==>Driver Manager need to told which JDBC driver it should try to connect


	Type of Driver:
	----------------
	1. Type 1 Driver (Jdbc-Odbc bridge driver or bridge driver)
	
	2. Type 2 Driver(Native API- partially Java driver or Native driver)

	3. Type 3 Driver (All Java net protocol driver or network protocol driver
			or middleware driver)

	4. Type 4 Driver (Pure java driver or native protocol driver or thin driver)




	1. Type 1 Driver (Jdbc-Odbc bridge driver or bridge driver)
	------------------------------------------------------------

	Java <=====>Type1 <=====> ODBC	<====> DB
	App	    driver	  driver


	*Jdbc-Odbc bridge driver or bridge driver
	* sun microsoft responsible to provide type 1 driver (discountunied from java 8)

	Adv:
	* No seprate installation is required (as part of jdk)
	* Easy to use
	* Communicate with the help of ODBC not directly so it is independent of database
	* Only avaliable for window system :(




	2. Type 2 Driver(Native API- partially Java driver or Native driver)
	---------------------------------------------------------

	Java <=====>Type2 <=====> vendor provided	<====> DB
	App	    driver	  database specific native
				  lib


	*Jdbc-Odbc bridge replace with vendor provided database specific lib
	* type 2 driver convert call to vendor specific native lib

	Adv:
	* speed better then type 1
	Dis:
	* Native lib need to install on client machine
	* Not every db vendor not provide type 2 driver : mysql dont provide, oracle provide
	* Plateform dependent


	2. Type 3 Driver (All Java net protocol driver or network protocol driver
			or middleware driver)
	-----------------------------------------------------------------

	Java <=====>Type3 <=====> middleware	<====> DB
	App	    driver	  server
				 (IDS server)
	<--------------->\<------------------->\<---------->
	  client machine    middleware machine	   database machine
			
	* Used in enterprise application, PI and Database independent :)
	* Its only driver that is plateform and vendor independent
	* middleware can communicate to DB using type 1,2,4 driver
	* follow 3 tier arch

	


	4. Type 4 Driver (Pure java driver or native protocol driver or thin driver)
	-------------------------------------------------------------------------

	Java <=====>Type4	<====> DB
	App	    driver	  


	* Directly intract with database ( hence fast), using native protocol
	* Convert java call to database call directly
	* Also know pure java driver( completly written in java, hence plateform independent)
	* Light weight driver

	Adv:
	* Only one conversion is required (very fast)
	* Plateform independent

	Dis:
	* It is database dependent ie for differnt database we have to download
	different driver for eg: for mysql mysql-jdbc-connector-j.jar file




Hello World
============

mysql -u root -p

	Create database employee_jdbc;
	use  employee_jdbc;


	create table employee(
		employeeId int not null primary key auto_increment,
		employeeName varchar(40) not null,
		employeeSalary int not null
	);

	insert into employee(employeeId ,employeeName ,employeeSalary)  
	values(121,'raja',23366.5);

	insert into employee(employeeId ,employeeName ,employeeSalary )  
	values(11,'amit',55366.5);




	preparedStatement = con.prepareStatement
		(insert into employee(employeeId ,employeeName ,employeeSalary)  values(?,?,?));

	
	Connection properties
	---------------------
	"jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root"

	Reading all records
	----------------------

			Connection con=DriverManager.getConnection
			("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.createStatement();
			rs=stmt.executeQuery("select * from employee");
			while(rs.next()){
				System.out.print(rs.getInt("employeeId")+" ");
				System.out.print(rs.getString("employeeName")+" ");
				System.out.println(rs.getDouble("employeeSalary"));
				
		        }


 


	Type of statement:
	================

	Statement==>used to create conneciton object

	PreparedStatement==>
	used to execute precompiled  SQL statementand retrive data into RS
	=> faster
	=> safer from sql injection

	CallableStatement==>used for calling stored procedure


	executeQuery()		 vs		 executeUpdate();
	-----------------------------------------------------------
	retrun type is RS		return type is int
	give u rs			give u no of rows effected
	for gettting data		for updating/deleting/adding data

	
Doing CRUD		
===========

	Step 1: Create DTO

	public class Employee {
		private int employeeId;
		private String employeeName;
		private double employeeSalary;



	Step 2: Create DAO interface ( Design to interface )



	public interface EmployeeDao {
		public List<Employee>getAllEmployee();
		public void addEmployee(Employee employee);
		public void deleteEmployee(int employeeId);
		public void updateEmployee(Employee employee);
		public Employee getEmployeeById(int employeeId);
	}





	Provide implementation
	=======================

	public class EmployeeDaoImp implements EmployeeDao {

		Connection con;

		public EmployeeDaoImp(Connection con) {
			this.con = con;
		}
		//.......
		//......
 	}


	Reading all records
	-------------------


			Connection con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.createStatement();
			rs=stmt.executeQuery("select * from employee");
			while(rs.next()){
				System.out.print(rs.getInt("employeeId")+" ");
				System.out.print(rs.getString("employeeName")+" ");
				System.out.println(rs.getDouble("employeeSalary"));
				
		        }







	Adding record
	-------------

			con=DriverManager.getConnection
		("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement
			("insert into employee(employeeId ,employeeName ,employeeSalary) values(?,?,?))");
			stmt.setInt(1, 2);
			stmt.setString(2, "rajiv");
			stmt.setDouble(3, 3333.6);
			stmt.executeUpdate();


	Update record
	---------------
			con=DriverManager.getConnection
			("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement
			("update employee set employeeName=? ,employeeSalary=? where employeeId=?");
		
			stmt.setString(1, "rajiv again");
			stmt.setDouble(2, 3333.6);
			stmt.setInt(4, 2);
			stmt.executeUpdate();
			

	Delete record
	--------------
			stmt=con.prepareStatement("delete from employee where employeeId=?");
			stmt.setInt(1, 2);
			stmt.executeUpdate();



	Get Employee as per id
	----------------------- 
			con=DriverManager.getConnection
			("jdbc:mysql://127.0.0.1:3306/employee_jdbc","root","root");
			stmt=con.prepareStatement("select * from employee where employeeId=?");

			// 1 is position no of empId field 
			stmt.setInt("employeeId", 11);
			 rs=stmt.executeQuery();
			
			if(rs.next()){
				System.out.println("employeeId:"+rs.getInt(1));
			}




	




GPP practices:
-------------

reading configuration information from properties files:
db.properties
-------------------
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/UserDB
user=root
password=root

Create an connection factory
-------------------------
	
	public class ConnectionFactory {
		private static Connection connection;
	
		public static Connection getConnection() {
			// read the property file, and load into Properties object
			InputStream is =ConnectionFactory
					.class.getClassLoader()
					.getResourceAsStream("db1.properties");
			
			Properties properties = new Properties();
	
			try {
				properties.load(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			String driver = properties.getProperty("jdbc.driver");
			String url = properties.getProperty("jdbc.url");
			String username = properties.getProperty("jdbc.username");
			String password = properties.getProperty("jdbc.password");
			
			// load the driver
			try {
				Class.forName(driver);
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
			// create a connection and
			try {
				connection = DriverManager.getConnection(url, 
						username, password);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			// return the connection
			return connection;
		}
	}





Difference bw execute() vs executeQuery() vs executeUpdate()
-----------------------------------------------------------------
		 executeQuery()
		---------------
			* Return resultset
			* dont change state of database
		executeUpdate()
		-------------
			* return no of row effected
			* used for add/del/update operation
		execute()
		---------
			* can be used for both operations
			* return T/F: T if it return RS, false if do update operation to db
			*should be used if query is taken at run time

	Example:
	----------
	
		Connection connection = ConnectionFactory.getConnection();

		System.out.println("PE a query");
		String query;
		Scanner scanner = new Scanner(System.in);
		query = scanner.nextLine();

		System.out.println(query);
		try {
			PreparedStatement pstmt = connection.prepareStatement(query);
			boolean val = pstmt.execute();
			// if val is true that means it is select kind of query
			if (val) {
				ResultSet rs = pstmt.getResultSet();
				while (rs.next()) {
					System.out.println(rs.getInt(1) 
							+ ":" +
							rs.getString(2));
				}
			} else {
				//pstmt.executeUpdate();//bad code
				int count=pstmt.getUpdateCount();
				System.out.println(count);
			}
			System.out.println(val);

		} catch (SQLException e) {
			e.printStackTrace();
		}






What next?
------------
Basics of stored procedure
calling store procedure, CallableStatement
using resultsetmeta data
using auto gen primary key
Transaction concept




Callable Statement
=====================
	==> group of sql quaries that can be fired in one go
	==> improved database intraction performacec	
 	==> For stored procedure
	==> Hello World store procedure


DELIMITER // 
Create PROCEDURE AllEmployees()
BEGIN
Select * from employee;
END
// 
DELIMITER ;



delimiter // 
create procedure addNum2(in num1 int, in num2 int ,out param1 int) 
begin 
set param1 := num1 + num2; 
end 
// 
delimiter ;


CREATE FUNCTION addNum2(IN x int,IN y int, OUT sum int) AS $$
BEGIN
    sum := x + y;
END;
$$ LANGUAGE plpgsql;






Check store procedure
---------------------
CALL test(3,6,@a);
select @a; 

Calling store procdure
----------------------

		con=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/raj","root","root");
		cstmt=con.prepareCallc("call test(?,?,?)");
		cstmt.setInt(1, 3);
		cstmt.setInt(2, 44);
		cstmt.registerOutParameter(3, Types.INTEGER);
		cstmt.execute();
		System.out.println("Result:"+cstmt.getInt(3));



	Progammer vs datbase adv
	-------------------------
	=> actually programming may not touch actual db in compaines
	=> but he can be provided with jdbc connection details by admin
	=> u can not create the tables etc
	=> but from java program u want to know what is table str? what is database 
	details?
	that u can know by using 2 interface:
	ResultSetMetaData
	DataBaseMetaData



	
Getting resultset meta data
-------------------------

			ResultSetMetaData rsMeta=rs.getMetaData();
			System.out.println("No of column:"+rsMeta.getColumnCount());
			
			for(int i=1;i<=rsMeta.getColumnCount();i++){
				System.out.println(rsMeta.getColumnClassName(i));
			}


	DatabaseMetaData dbmd=con.getMetaData();  
  
	System.out.println("Driver Name: "+dbmd.getDriverName());  
	System.out.println("Driver Version: "+dbmd.getDriverVersion());  
	System.out.println("UserName: "+dbmd.getUserName());  
	System.out.println("Database Product Name: "+dbmd.getDatabaseProductName());  
	System.out.println
	("Database Product Version: "+dbmd.getDatabaseProductVersion());

prints total number of tables :
--------------------------
	DatabaseMetaData dbmd=con.getMetaData();  
	String table[]={"TABLE"};  
	ResultSet rs=dbmd.getTables(null,null,null,table);  
  
	while(rs.next()){  
		System.out.println(rs.getString(3));  
	}  


  
Auto key generation
-------------------
Consider:

create table customer
(
	customerId int not null primary key AUTO_INCREMENT,
	customerName varchar(60) not null,
	customerAddress varchar(80) not null
);
fetching autogenerated key:
-----------------------------
String sql = "INSERT INTO table (column1, column2) values(?, ?)";
stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);


stmt.executeUpdate();
if(returnLastInsertId) {
   ResultSet rs = stmt.getGeneratedKeys();
    rs.next();
   auto_id = rs.getInt(1);
}



Transations (ACID): 
==================
	Need of transaction:
	-------------------
	create table account(id int  primary key,balance int not null);
	insert into account(id, balance) values(1,200);
	insert into account(id, balance) values(2,200);



	Connection connection = ConnectionFactory.getConnection();
			try {
			Statement stmt=connection.createStatement();
			stmt.addBatch("update account set balance = balance - 100 where id=1");
			
			stmt.addBatch("update account set balance = balance + 100 were id=2");
			stmt.executeBatch();
			System.out.println("done ");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}


	What is transcation?
	--------------------
	A transaction is a single logical unit of work which 
	accesses and possibly modifies the contents of a database. 

	Transactions access data using read and write operations.

	 In order to maintain consistency in a database,
	 before and after the transaction, certain properties are followed.

	 These are called ACID properties

	A:Atomicity
	C:Consistancy
	I:Isolation
	D:Durability


	try{
	con.setAutocommit(false);

	///
	///
	con.commit();
	}catch(SQLEx e){
	con.rollback();
	}



Java 8:
----------
test: 4:00 PM
5:30



















		using code (programmatic approaching)  5%
		    using annotation (declerative approach) 95%

	Steps for making an transactions:
	--------------------------------
	1. connection.setAutoCommit(false);

	2. If everything goes well then 
			connection.commit();
	3. If something goes wrong then
			connection.rollback();

	Connection connection = ConnectionFactory.getConnection();

		try {
			connection.setAutoCommit(false);
			Statement stmt = connection.createStatement();
			stmt.addBatch("update account set balance = balance - 100 where id=1");

			stmt.addBatch("update account set balance = balance + 100 were id=2");
			stmt.executeBatch();
			connection.commit();
			System.out.println("done ");

		} catch (SQLException e) {
			e.printStackTrace();

		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

https://www.roseindia.net/tutorial/java/jdbc/jdbcisolationlevels.html





Scrollable resultSet
--------------------
	CreateStatement accept some constants:

	stmt=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);

	What is the meaning of SCROLL_SENSITIVE?
          ------------------------------------------------------------
		==>A ResultSet thats scroll-sensitive is live.
		==> As other users modify the data reflected in the ResultSet, 
			the ResultSet can be changed to reflect the revised view of the data

	What is the meaning of Scroll-Insensitive?
         ---------------------------------------------------------
	==>A ResultSet thats scroll-insensitive is a static view of the data
	==> ie If the data in the ResultSet is changed by other clients, 
		the ResultSet isnt updated accordingly


			con=DriverManager.
				getConnection("jdbc:mysql://localhost:3306/employee_jdbc","root","root");
			stmt=con.createStatement
				(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			
			rs=stmt.executeQuery("select * from employee");
			
			while(rs.next()){
				System.out.println(rs.getString(2));
			}
			rs.absolute(1);
			
			rs.updateString(2, "ttt");
			rs.updateRow();
			rs.beforeFirst();
			
			System.out.println("===============");
			while(rs.next()){
				System.out.println(rs.getString(2));
			}
			





https://www.codejava.net/java-se/jdbc/how-to-use-scrollable-result-sets-with-jdbc









http://stackoverflow.com/questions/1376218/is-there-a-way-to-retrieve-the-autoincrement-id-from-a-prepared-statement
long key = -1L;
Statement statement = connection.createStatement();
statement.executeUpdate(YOUR_SQL_HERE, Statement.RETURN_GENERATED_KEYS);
ResultSet rs = statement.getGeneratedKeys();
if (rs != null && rs.next()) {
    key = rs.getLong(1);
}






https://www.javatpoint.com/DatabaseMetaData-interface
