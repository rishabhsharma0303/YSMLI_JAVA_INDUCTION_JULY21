
Day 1: fundamental questions/baics questions:
------------------------------------------

what is the op?
------------
long a=9958543978;
System.out.println(a);


what is the op?
-----------------
char i=97; //storing int into char
System.out.println(i);
	

char i='A'; //storing  char
System.out.println(i);




What is the op?
--------------
	int i=028;
	System.out.println(i);


Note: No starting from 0 are octal, 0-7 
      how to convert octal to int
	
	0 2 6 
	  2*8 power 1 +  6*8 power 0
	  2*8+6=22


What is the op?
---------------

	byte i=33;
	byte j=22;
	byte k=i+j;
	System.out.println(k);
	    

Note : range of byte (8 bits): -178 0 to +128


what is the op?
---------------
	  int $=44;
	  System.out.println($);



How to write a program to call main twice?
----------------------------------------
Hint: static init  block


What happens if we comment 
------------------------------
// \u000d System.out.println("i love java");





Can we comment Unicode Carriage Return?



What is the op?
------------

		int String =33;
		System.out.println(String);



	


What is the op?
--------------	
public class Demo3 {
	
	public static void main(String[] args) {
		System.out.println("500");
		System.exit(0);
		System.out.println("600");
	}

}

What is the op? Dry run:
----------------
public class Demo2 {

	public static void main(String[] args) {
		int x[]={2,3,4,-4,5,6,7,9};
		int loc=0;
		int i=0;
		for( i=0;i<x.length; i++){
			if(x[i]==-4)
				break;
			loc++;
		}
		
		int j=loc;
		int k=x.length;
		while(j<k-1){
			x[j]=x[j+1];
			j++;
		}
		
		for(int temp: x)
			System.out.print(temp+":");
	}

}



What is the op?
---------------

enum Enums{
	A,B,C;
	private Enums(){
		System.out.println("10");
	}
}
public class Demo3 {
	
	public static void main(String[] args) {
		Enums e=Enums.B;
	}

}









What is the op?
----------------

public class Demo4 {
	//java Demo3 1 2 3
	public static void main(String[] args) {
		String [][]arguments=new String[2][2];
		int x= 0;
		arguments[0]=args;
		x=arguments[0].length;
		for(int y=0;y<x;y++){
			System.out.println(" "+ arguments[0][y]);
		}
		
	}

}


Dry run:
----------
    class Demo {
        public static void main(String args[])
        {
            int num[] = {5, 10, 11, 12, 56, 2};
            int result;
            result = 0;
            for (int i = 0; i < 6; ++i) 
                result = result + num[i];
	    System.out.print((double)result/6);
 
        } 
    }



Dry run:
--------
public class Demo3 {
	public static void main(String[] args) {

		  char array_variable [] = new char[10];
		    for (int i = 0; i < 10; ++i) {
	                array_variable[i] = 'i';
	                System.out.print(array_variable[i] + "" );
	                i++;
	            }
	}
}


Dry run :
---------
public class Demo3 {
	// java Demo3 1 2 3
	public static void main(String[] args) {
		int arr[][]=new int[3][];
		arr[0]=new int[1];
		arr[1]=new int[2];
		arr[2]=new int[3];
		
		int sum=0;
		for(int i=0;i<3; ++i)
			for(int j=0;j<i+1;++j)
				arr[i][j]=j+1;
		
			for(int i=0;i<3;++i)
				for(int j=0;j<i+1;++j)
					sum+=arr[i][j];
			System.out.println(sum);
	}
}


//Ans : 10



What is the op?
------------
public class Demo5 {
	public static void main(String[] args) {
		final int a=2, b=3;
		while(a<b){
			System.out.println("hello");
		}
		System.out.println("bye");
	}
}











Q1



public class Person{
     public String name;
public static void main(String str[]){
  Person p=null;
   System.out.print(p instanceof Person);
}


What is the result of compilation or execution of the code?
1. Prints false
2. Prints true
3. Results in compilation error
4. Results in runtime error


Q2. Which of these statements are true?

A. If a RuntimeException is not caught, the method will terminate and normal
execution of the thread will resume.
B. An overriding method must declare that it throws the same exception classes as the
method it overrides.
C. The main method of a program can declare that it throws checked exceptions.
D. finally blocks are executed if and only if an exception gets thrown while inside the
corresponding try block.


















Q3. Which of the following is false?
A. Class name and constructor name must be same
B. Constructor does not have return type
C. Constructor must be public
D. Constructor cannot be static
























Q4. What will be the result of compiling and running the following code?
class Base{
public short getValue(){ return 1; } //1
}
class Base2 extends Base{
public byte getValue(){ return 2; } //2
}
public class TestClass{
public static void main(String[] args){
Base b = new Base2();
System.out.println(b.getValue()); //3
}
}
Select 1 option
A. It will print 1
B. It will print 2.
C. Compile time error at //1
D. Compile time error at //2


Q5.  Which of the following are valid classes?

Select 1 option
A.abstract public class ImaginaryNumber extends Number {
}
B. public class ThreeWayBoolean extends Boolean {
}
C. public class NewSystem extends System {
}
D. public class ReverseString extends String {
}














Q8. Which of the following statements are true?

A. Private methods cannot be overridden in subclasses.

B. A subclass can override any method of a non-final superclass.

C. An overriding method can declare that it throws a wider
 spectrum of checked exceptions than the method it is overriding.

D. The parameter list of an overriding method must be a 
 subset of the parameter list of
 the method that it is overriding.











What is the op?
---------------------

class T{
	public static final int temp=100;
	static {
		System.out.println(" i am static block");
	}
}
public class Demo {

	public static void main(String[] args) {
		
		System.out.println(T.temp);
	}
}




Ex: what is the op?

String demo="one"+2*2+"threee";
























What happens if remove final?



What happens?

public class Demo {

	Demo(){
		System.out.println("inside ctr");
	}
	Demo demo=new Demo();
	public static void main(String[] args) {
		
		new Demo();
		
	}
}











interface A{
	public static final int i=0;
	void foo();
}
abstract class B implements A{
   void foo(){
  }
}








default void foof(){}
static void foofStatic(){}



What is the o/p?
------------------
public class DemoInteger {
	
	public static void main(String[] args) {
		Integer i1=127;
		Integer i2=127;
		System.out.println(i1==i2);
		
		Integer i3=128;
		Integer i4=128;
		System.out.println(i3==i4);
	}
}







// Integer.valueOf();
Integer cache ( for performance)



call by val vs call by ref
---------------------------
call by v value vs call by ref


null with static method : What will be the O/P?
------------------

class A{
	public static void foo(){
		System.out.println(" i am static  method");
	}
}
public class DemoStatic {
	public static void main(String[] args) {
		A a=null;
		a.foo();	
	}
}





Which code with compile?
-----------------------------
	function overloading

		Integer val=new Integer(null);
		String s=new String (null);


class A1{
	void foof(String a){
		System.out.println("void foof(String a)");
	}
	void foof(Integer a){
		System.out.println("void foof(Integer a)");
	}
}
public class DemoOverloading {

	public static void main(String[] args) {
		A1 a=new A1();
		a.foof(null);
	}

}









































ambigous ctr call
------------------
What if i run it?








What is the op?
---------------------


		Set<String> s=new HashSet<String>();
		s.add("QA");
		s.add("dev");
		System.out.println(s);

		
		Set<String> s2=new HashSet<String>(){{
			add("QA"); 
			s.add("dev");
		}};
		
		System.out.println(s2);














		=> double brace init {{ }}
		=> first brace create an annomous class and inner brace is used to init....... 





What is the op?
--------------------

public class DemoNeverWriteThisCode {

	public static void main(String[] args) {

		System.out.println(returnSomething());
		
	}

	private static int returnSomething() {
		try{
			return 5;// throws new NullPointerException();
		}finally{
			return 9;
		}
	}

}










	=>maigic of finally
	=>never ever return value from finally block ? why? 





autoboxing, int and wrapper classes
----------------------------------

What is the op?
---------------

		Long l=new Long(0);
		System.out.println(l.equals(0));









What is the O/P?
-----------------
class Cat{
	public static void meow(){
		System.out.println("meow");
	}
}

class CostlyCat extends Cat{
	public static void meow(){
		System.out.println("costly meow");
	}
}
public class DemoStaticMethod {
	public static void main(String[] args) {
		Cat c=new CostlyCat();
		c.meow();
	}


}





What is the O/P?
-----------------



class Cat{
	public static String foo="value";
}

class CostlyCat extends Cat{
	 private static String foo="value2";
}
public class Demo {

	public static void main(String[] args) {

		System.out.println(new CostlyCat().foo);
	}
}





	=>hiding superclass variable method























What is the O/P?
-----------------

Autoboxing, Inheritance and Overriding
--------------------------------------
class A{
	
	void method(int i){
		System.out.println("base method ");
	}
}
class B extends A{
	void method(Integer i){
		System.out.println("overriden method ");
	}
	
}
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		A a=new B();
		a.method(22);
	}
}
















Constructor overloading and NULL
---------------------------------

What is the op?
------------------


public class Confusion {

	public Confusion(Object o){
		System.out.println("public Confusion(Object o)");
	}
	
	public Confusion(double[] o){
		System.out.println("public Confusion( double[] o)");
	}
			
	public static void main(String[] args) {
		
		new Confusion(null);
		
	}
	
}












character addition, subtraction
-------------------------------

		System.out.println("H" + "i");
		System.out.println('H'+'i');

	// on add of char java convert them to there ascii value






















What is the op?
------------------

	class Foo {
		private int i;
	
		public Foo(int i) {
			this.i = i;
		}
	
		public boolean equals(Foo obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Foo other = (Foo) obj;
			if (i != other.i)
				return false;
			return true;
		}
	
	}
	
	public class Confusion {
	
		public static void main(String[] args) {
	
			Object f1 = new Foo(22);
			Object f2 = new Foo(22);
			
			System.out.println(f1==f2);
	
		}
	
	}





double subtraction and BigDecimal
----------------------------------
double 
1.0000000000000
1.0

What is the op?
-------------

		double d=1.1-1.00;
		
		if(d==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");


















	Why?

	=> never compare double , float , object with ==
	=> actual value of d is not 0.10

	What to do?
	---------
	=> if you want to manipulate double never use double / float
	use BigDecimal class

	Correct approach?
	----------------
	BigDecimal d2=new BigDecimal("1.10").subtract(new BigDecimal("1.00"));
		System.out.println(d2);
		
		
		if(d2.doubleValue()==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");














What is the op?
---------------------

public class Confusion {
	private static Random random=new Random();
	public static void main(String[] args) {
		StringBuffer word=null;
		switch (random.nextInt(5)) {
		case 1:
			word=new StringBuffer('M');
			break;

		default:
			word=new StringBuffer('N');
		}
	
		word.append('a');
		word.append('b');
		
		System.out.println(word);
	}

}







	=> StringBuffer Constructor and Char








Random with seed
-----------------
What is the op?
-----------------

public class Confusion {

	public static void main(String[] args) {
		
		Set<Integer> s=new HashSet<Integer>();
		
		for(int i=0;i<100;i++)
			s.add(myMethod());
	}

	private static Integer myMethod() {
		return new Random(12345678L).nextInt();
	}

}



What is the op?
----------------
	
	class MyEx extends Exception {
		int details;
	
		MyEx(int a) {
			details = a;
		}
	
		public String toString() {
			return "details";
		}
	}
	
	public class DemoException {
	
		static void compute(int a) throws MyEx {
	
			throw new MyEx(a);
		}
	
		public static void main(String[] args) {
			try {
				compute(3);
			} catch (ArithmeticException ex) {
				System.out.println(ex);
			}
		}
	}



What is the op?
----------------
	
	public class Main_arg {
		
		public static void main(String[] args) {
			
			String[][]arguments=new String[2][2];
			int x;
			arguments[0]=args;
			x=arguments[0].length;
			
			for(int y=0; y< x; y++){
				System.out.println(" "+arguments[0][y]);
			}
		}
	
	}
















Why op?
Correct approach:

return new Random().nextInt();












What is the op?
------------------

class String {
}

public class SimpleCode {
	public static void main(String[] args) {
		System.out.println("hi");
	}

}





What is the op?
--------------
		final int a=10, b=20;
		
		while(a<b){
			System.out.println("hello");
		}
	

		System.out.println("world");




What is the op?
-----------------
		
		String[][]arguments=new String[2][2];
		int x;
		arguments[0]=args;
		x=arguments[0].length;
		
		for(int y=0; y< x; y++){
			System.out.println(" "+arguments[0][y]);
		}



what is the op?
-------------

		StringBuffer sb=new StringBuffer('A');
		sb.append("C");
		System.out.println(sb);





What is the op?
-----------------
	String s="abc technologies";
		s.toUpperCase();
		System.out.println(s);
		
		System.out.println(s.indexOf("te"));
		
									 
	StringBuffer sb=new StringBuffer("ABCDE");
		//sb.setCharAt(3, 'X');
		sb.replace(2, 3, "PP");
		System.out.println(sb.toString());




Q: how to print no of occurance of an particular char in a string?
 Ex: i love java find no of no of occurance of a?

Q. How to print reverse of an string
Q. Checking for pallindrom 
Q. Reverse the string as explained:
	i love java and teaching

 Ex1:	teaching and java love i
 Ex2:   gnihcaet dna avaj evol i




what is the op? Dry run
----------------------------
		String val="aabbccdduee";
		char[]arr=val.toCharArray();
		boolean isOrdered=true;
		for(int i=1; i< arr.length; i++){
			if(arr[i]<arr[i-1]){
				isOrdered=false;
				break;
			}
		}
		System.out.println(isOrdered);



























































