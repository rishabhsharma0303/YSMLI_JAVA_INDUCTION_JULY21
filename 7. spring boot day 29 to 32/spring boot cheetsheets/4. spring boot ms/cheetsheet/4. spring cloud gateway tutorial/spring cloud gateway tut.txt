What is an API Gateway? Why do we need it?
_______________________________

	=> An API Gateway acts as a single entry point for a collection of microservices. 

	=> Any external client cannot access the microservices directly but can access 
	them only through the application gateway

Advantages :
____________
	=> This improves the security of the microservices as we limit the access of 
	external calls to all our services.

	=> The cross cutting concerns like authentication, monitoring/metrics, and resiliency will 
	be needed to be implemented only in the API Gateway as all our calls will be routed through it.

	=> The client does not know about the internal architecture of our microservices system.
	 Client will not be able to determine the location of the microservice instances.
	
	=> Simplifies client interaction as he will need to access only a single service for all the requirements.

Spring Cloud Gateway Architecture
____________________________

	=> Spring Cloud Gateway is API Gateway implementation by Spring Cloud team
	 on top of Spring reactive ecosystem. It consists of the following building blocks-

	=> When the client makes a request to the Spring Cloud Gateway, 
	the Gateway Handler Mapping first checks if the request matches a route.
	 This matching is done using the predicates. If it matches the predicate then the request is sent to the filters.

Route: 
_______
Route the basic building block of the gateway.
It consists of 
1)ID
2)destination URI
3)Collection of predicates and a collection of filters

A route is matched if aggregate predicate is true.

Predicate: 
_______
	This is similar to Java 8 Function Predicate. 
	Using this functionality we can match HTTP request, such as headers , url, cookies or parameters.

Filter:
_______
	 These are instances Spring Framework GatewayFilter.
	 Using this we can modify the request or response as per the requirement. 




Using Spring Cloud Gateway we can create routes in either of the two ways -
_________________________________________________________________________
1) Use java based configuration to programmatically create routes
2) Use property based configuration(i.e application.properties or application.yml) to create routes.

   

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
	</dependencies>



property based configuration
_______________________________

Define the application.yml as follows-

server:
  port: 8080

spring:
  cloud:
    gateway:
      routes:
      - id: employeeModule
        uri: http://localhost:8081/
        predicates:
        - Path=/employee/**
      - id: consumerModule
        uri: http://localhost:8082/
        predicates:
        - Path=/consumer/**



Java based configuration
_______________________________

Create the configuration class where we define the route configurations. 
Gateway Handler resolves route configurations by using RouteLocator Bean.


import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SpringCloudConfig {

    @Bean
    public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
                .route(r -> r.path("/employee/**")
                        .uri("http://localhost:8081/")
                        .id("employeeModule"))

                .route(r -> r.path("/consumer/**")
                        .uri("http://localhost:8082/")
                        .id("consumerModule"))
                .build();
    }

}




Cloud Gateway Filters Example
_____________________________
Using Predicates Spring Cloud Gateway determines which route should get called.
 Once decided the request is the routed to the intended microservice. 

Before routing this request we can apply some filters to the request. 

These filters are known as pre filters. 
After applying the filters the intended micoservice call is made and the response is returned back to the Spring Cloud Gateway which returns this response back to the caller. 
Before returning the response we can again apply some filters to this response. 
Such filters are called post filters


Implementing Spring Cloud Gateway Filters
_________________________________________

Spring Cloud Gateway filters can be classified as
____________________________________________________

Spring Cloud Gateway Pre Filters
Spring Cloud Gateway Post Filters



Spring Cloud Filters can be implemented in following two ways-
___________________________________________________________

Spring Cloud Gateway Filters using Java Configuration
Spring Cloud Gateway Filters using Property Configuration


Spring Cloud Gateway Filters using Java Configuration
__________________________________________

@Configuration
public class SpringCloudConfig {

	@Bean
	public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
		return builder.routes()
				.route(r -> r.path("/employee/**")
				//Pre and Post Filters provided by Spring Cloud Gateway
						.filters(f -> f.addRequestHeader("first-request", "first-request-header")
							.addResponseHeader("first-response", "first-response-header"))
						.uri("http://localhost:8081/")
						.id("employeeModule"))

				.route(r -> r.path("/consumer/**")
				//Pre and Post Filters provided by Spring Cloud Gateway
					.filters(f -> f.addRequestHeader("second-request", "second-request-header")
						.addResponseHeader("second-response", "second-response-header"))
						.uri("http://localhost:8082/")
						.id("consumerModule"))
				.build();
	}

}
   

Implementing Spring Cloud Gateway Filters using Property based Configuration
_____________________________________________________________________________


server:
  port: 8080

spring:
  cloud:
    gateway:
      routes:
      - id: employeeModule
        uri: http://localhost:8081/
        predicates:
        - Path=/employee/**
        filters:
        - AddRequestHeader=first-request, first-request-header
        - AddResponseHeader=first-response, first-response-header
      - id: consumerModule
        uri: http://localhost:8082/
        predicates:
        - Path=/consumer/**
        filters:
        - AddRequestHeader=second-request, second-request-header
        - AddResponseHeader=second-response, second-response-head



Spring Cloud Gateway + Neflix Eureka Discovery Service-property file configuration
____________________________________________________________________________________

server:
  port: 8080
 
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8083/eureka 

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      routes:
      - id: employeeModule
        uri: lb://FIRST-SERVICE
        predicates:
        - Path=/employee/**
      - id: consumerModule
        uri: lb://SECOND-SERVICE
        predicates:
        - Path=/consumer/**


Spring Cloud Gateway + Neflix Eureka Discovery Service-Java configuration
________________________________________________________________________

@Configuration
public class SpringCloudConfig {

    @Bean
    public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
                .route(r -> r.path("/employee/**")
                        .uri("lb://FIRST-SERVICE")
                        .id("employeeModule"))

                .route(r -> r.path("/consumer/**")
                        .uri("lb://SECOND-SERVICE")
                        .id("consumerModule"))
                .build();
    }

}






cloud gatway	: better alternative of zuul api gateway
_______________________________________________________

https://www.javainuse.com/spring/cloud-gateway




server:
  port: 8100
spring:
  cloud:
    gateway:
      routes:
      - id: customerModule
        uri: http://localhost:8081/
        predicates:
        - Path=/customer/**
      - id: productModule
        uri: http://localhost:8083/
        predicates:
        - Path=/product/**
      - id: orderModule
        uri: http://localhost:8080/
        predicates:
        - Path=/order/**
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/


server:
  port: 8100
spring:
  application:
    name: spring-cloud-gateway
  cloud:
    gateway:
      routes:
      - id: customerModule
        uri:  lb://CUSTOMER-SERVICE
        predicates:
        - Path=/customer/**
      - id: productModule
        uri:  lb://PRODUCT-SERVICE
        predicates:
        - Path=/product/**
      - id: orderModule
        uri:  lb://ORDER-SERVICE
        predicates:
        - Path=/order/**
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/


