
Spring boot jsp thymeleaf
______________________________



step 1: 
_________
choose dependencies: devTools, actutator, jpa, mysql, web, security


step 2: paste in application.properties file
________

server.servlet.context-path=/empapp
server.port=8080

spring.datasource.url=jdbc:mysql://localhost:3306/kr_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=create
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true



step 3: create domain
___________
@Entity
@Table(name="emp_table")
public class Employee {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String name;
	private int age;
}


@Repository
public interface EmpRepo extends CrudRepository<Employee, Integer>{

}




step 4: create service
____________________

public interface EmployeeService {
	public List<Employee> getAll();
	public Employee getEmployeeById(int id);
	public Employee save(Employee emp);
	public Employee delete(int empId);
	public Employee update(int empId, Employee emp);
}



@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmpRepo empRepo;
	
	@Override
	public List<Employee> getAll() {
		return (List<Employee>) empRepo.findAll();
	}

	@Override
	public Employee getEmployeeById(int id) {
		return empRepo.findById(id).orElseThrow(EmployeeNotFoundException:: new);
	}

	@Override
	public Employee save(Employee emp) {
		return empRepo.save(emp);
	}

	@Override
	public Employee delete(int empId) {
		Employee employeeToDelete=getEmployeeById(empId);
		empRepo.delete(employeeToDelete);
		return employeeToDelete;
	}

	@Override
	public Employee update(int empId, Employee emp) {
		Employee employeeToUpdate=getEmployeeById(empId);
		employeeToUpdate.setName(emp.getName());
		employeeToUpdate.setAge(emp.getAge());
		return empRepo.save(employeeToUpdate);
	}
}



public class EmployeeNotFoundException extends RuntimeException{
}





step 5: create rest controller
____________________________-

@RestController
public class EmpRestController {
	
	@Autowired
	private EmployeeService employeeService;
	

	@GetMapping(path="employee", produces=MediaType.APPLICATION_JSON_VALUE)
	public List<Employee> allEmployees(){
		return employeeService.getAll();
	}
	
	
	
	@GetMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE )
	public Employee getEmployeeById(@PathVariable(name="id")int id){
		return employeeService.getEmployeeById(id);
	}
	
	@PostMapping(path="employee",produces=MediaType.APPLICATION_JSON_VALUE, 
			consumes=MediaType.APPLICATION_JSON_VALUE )
	public Employee addEmployee(@RequestBody Employee employee){
		return employeeService.save(employee);
	}
	
	@PutMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE, 
			consumes=MediaType.APPLICATION_JSON_VALUE )
	public Employee updateEmployee(@PathVariable(name="id") int id,   @RequestBody Employee emp){
		return  employeeService.update(id, emp);
		
	}
	
	
	@DeleteMapping(path="employee/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public Employee deleteEmplloyee(@PathVariable(name="id") int id){
		return employeeService.delete(id);
	}
}



@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	@Autowired
	private EmployeeService empService;
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		System.out.println("rec are saved...");
		empService.save(new Employee("raj", 33));
		empService.save(new Employee("ekta", 30));
		empService.save(new Employee("gunika", 10));
		empService.save(new Employee("keshav", 5));		
	}

}





spring boot jsp
________________

create jsp page to render data
______________________________

test with hello controller

@Controller
public class TestController {

	@RequestMapping("/welcome")
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}

}

put jsp in /bootapp/src/main/webapp/WEB-INF/views




create EmployeeController to use jsp
______________________________________


@Controller
public class EmpController {

	@Autowired
	private EmployeeService employeeService;

	@RequestMapping(value = "viewAll", method = RequestMethod.GET)
	public ModelAndView viewAll() {
		ModelAndView m = new ModelAndView();
		m.setViewName("viewAll");
		m.addObject("emps", employeeService.getAll());
		return m;
	}

	@RequestMapping(value = "addEmp", method = RequestMethod.GET)
	public String showEmpForm(ModelMap map) {
		Employee emp = new Employee();
		map.addAttribute("emp", emp);
		return "empform";
	}

	@RequestMapping(value = "addEmp", method = RequestMethod.POST)
	public String submittedEmpForm(
			@ModelAttribute(value = "emp") Employee employee) {
		System.out.println("--------------------------");
		System.out.println(employee);
		int id = employee.getId();
		if (id == 0) {
			employeeService.save(employee);
		} else {
			employeeService.update(id, employee);
		}
		return "redirect:viewAll";
	}

	@RequestMapping(value = "delEmp", method = RequestMethod.GET)
	public String deleteBook(HttpServletRequest request) {

		Integer id = Integer.parseInt(request.getParameter("id"));
		employeeService.delete(id);
		return "redirect:viewAll";
	}

	@RequestMapping(value = "updateEmp", method = RequestMethod.GET)
	public String updateEmp(HttpServletRequest request, ModelMap model) {

		Integer id = Integer.parseInt(request.getParameter("id"));
		Employee empToUpdate = employeeService.getEmployeeById(id);

		model.addAttribute("emp", empToUpdate);
		return "empform";
	}


	@ExceptionHandler(EmployeeNotFoundException.class)
	public ModelAndView handleEmployeeNotFoundException(HttpServletRequest request, Exception ex){
		ModelAndView modelAndView = new ModelAndView();
	    modelAndView.addObject("exception", ex);
	    modelAndView.addObject("url", request.getRequestURL());
	    
	    modelAndView.setViewName("error");
	    return modelAndView;
	}	
}




create viewAll jsp
__________________-


<body>
	<table>
		<thead>
			<tr>
				<th>emp id</th>
				<th>emp name</th>
				<th>emp age</th>
			</tr>
		</thead>

		<tbody>

			<c:forEach var="e" items="${emps}">
				<tr>
					<td>${e.id}</td>
					<td>${e.name}</td>
					<td>${e.age}</td>
					<td><a href="updateEmp?id=<c:out value="${e.id }"/>">update</a>
					<td><a href="delEmp?id=<c:out value="${e.id }"/>">delete</a>
				</tr>
			</c:forEach>

		</tbody>
	</table>
	<a href="addEmp">Add new employee</a>
</body>






create empform jsp
___________________


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>new emp reg form</title>
</head>
<body>

<form:form action="addEmp" method="post" modelAttribute="emp">
	<form:hidden path="id"/><br/>
	Enter emp name:<form:input path="name"/><br/>
	Enter emp age:<form:input path="age"/><br/>
	<input type ="submit"/>
</form:form>

</body>
</html>








