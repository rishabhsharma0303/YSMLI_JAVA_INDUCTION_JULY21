
Spring boot getting started
___________________________

Agenda:
__________

 day 1:
_________
 Advantage of spring boot , configuration spring boot
 Spring boot hello world, REST service
 Spring jpa, spring data
 Spring jdbc, spring transaction mgt
 Book store curd REST service
 Understand Spring boot auto config
 Using ResponseEntity & http status code
 Exception handing spring boot
 JSR 303 validation
 hateoas
 Swagger Documentation
 Monitoring APIs with Spring Boot Actuator
 Versioning RESTful Services 
 Enable cacheing
 schedule processes
 Spring boot jsp crud 
 Excercise


Dependencies used
______________
spring mvc
HATEOAS
spring jdbc
spring jpa
mysql
security
devtools
Actuator


History Spring boot : Summarized:
_________________________________

1.0.0: Support from Java 6 - 8
1.3.0: Support from Java 7 - 8, additional configuration for Java 6 required
2.0.0: Support from Java 8 - ...



	Advantage of spring boot , configuration spring boot
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	Advantage of spring boot
	_____________________

	=> Auto-Configuration 

	=> Dependency Management

	=> Advanced Externalized Configuration
		bean can be configured through application.properties file 
		without touching java or xml config

	=> Production support
		We get health checking, application and jvm metrics, 
		jmx via http and a few more things for free

	=> Runnable Jars
		 We can package your application as a runnable jar with embedded tomcat
		 included so it presents a self-contained deployment unit

	=> Microservice


	configuration spring boot
	____________________

	create spring boot project: choose web, jpa, derby....

	//Configuration, @EnableAutoConfiguration and @ComponentScan



	@SpringBootApplication
	public class Application {
	
	  public static void main(String[] args) {
	    ApplicationContext ctx = SpringApplication.run(Application.class, args);
	
	    System.out.println("Let's inspect the beans provided by Spring Boot:");
	
	    String[] beanNames = ctx.getBeanDefinitionNames();
	    Arrays.sort(beanNames);
	    for (String beanName : beanNames) {
	        System.out.println(beanName);
	    }
	  }
	
	}

	spring-boot:run


	Spring boot ApplicationRunner and CommandLineRunner:
	----------------------------------------

	@Component
	public class ApplicationRunnerBean implements ApplicationRunner {
	@Override
	public void run(ApplicationArguments args) throws Exception {
		String collectStr = Arrays.stream(args.getSourceArgs()).collect(Collectors.joining(","));
		System.out.println(collectStr);
	}

	}

	Hello world:
	_____________

	
	@RestController
	public class HelloRestController {
		
		@RequestMapping("/hello")
		public String hello(){
			return "spring boot";
		}
           }  
	


	public class Book {
		private int id;
		private String title;
		private double price;
	}


	
	
	@GetMapping("book/{id}")
	public Book getBookById(@PathVariable(name = "id")int id) {
		return new Book(id, "java", "raj", 500.00);
	}



	application.properties
	______________________
	server.servlet.context-path=/bookapp
	server.port=8080

	        <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>



Running spring boot :
____________________

	eclipse plugin
	spring initilizer
	spring cli

	https://www.journaldev.com/8195/spring-boot-cli-setup-and-helloworld-example

	spring init -n=jpa-one-to-one-demo -d=web,jpa,mysql --package-name=com.example.jpa demoproj


bannner:
__________

spring.banner.location=classpath:banner.txt

https://devops.datenkollektiv.de/banner.txt/index.html

Running jar file
________________

java -jar  jpa_demo2-0.0.1-SNAPSHOT.jar --server.port=8050
https://docs.spring.io/spring-boot/docs/1.1.2.RELEASE/reference/html/common-application-properties.html





Spring boot jpa crud:
____________________

step 1: dao layer
________________

@Entity
@Table(name = "book_table_boot")
public class Book {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String title;
	private double price;



@Repository
public interface BookDao extends JpaRepository<Book, Integer> {
}


step 1: service layer
________________


public interface BookService {
	public List<Book> getAllBooks();
	public Book addBook(Book book);
	public Book updateBook(int id, Book book);
	public Book deleteBook(int id);
	public Book getById(int id);
}



@Service
@Transactional
public class BookServiceImpl implements BookService {

	private BookDao bookDao;

	@Autowired
	public BookServiceImpl(BookDao bookDao) {
		this.bookDao = bookDao;
	}

	@Override
	public List<Book> getAllBooks() {
		return bookDao.findAll();
	}

	@Override
	public Book addBook(Book book) {
		bookDao.save(book);
		return book;
	}

	@Override
	public Book updateBook(int id, Book book) {
		Book bookToUpdate=getById(id);
		bookToUpdate.setPrice(book.getPrice());
		bookToUpdate.setTitle(book.getTitle());
		bookDao.save(bookToUpdate);
		return bookToUpdate;
	}

	@Override
	public Book deleteBook(int id) {
		Book bookToDelete=getById(id);
		bookDao.delete(bookToDelete);
		return bookToDelete;
	}

	@Override
	public Book getById(int id) {
		return bookDao.findById(id)
				.orElseThrow(() -> new BookNotFoundException("book with id " + id + " is not found"));
	}
}


public class BookNotFoundException extends RuntimeException{
	private static final long serialVersionUID = 4351688402749113855L;

}





Spring boot config
____________________
server.servlet.context-path=/bookapp
server.port=8080

spring.datasource.url=jdbc:mysql://localhost:3306/hcl_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true



application.yml
________________
server:
  port: 8082
  servlet:
    context-path: product-service
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/sp_boot?useSSL=false
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate.ddl-auto: update
    generate-ddl: true
    show-sql: true




Rest controller
________________

@RestController
public class BookRestController {
		
		//using response entity
			
		private BookService bookService;
			
		@Autowired
		public BookRestController(BookService bookService) {
			this.bookService = bookService;
		}
		
		@GetMapping("book")
		public List<Book> getAllBooks() {
			return bookService.getAllBooks();
		}
			
		@GetMapping("book/{id}")
		public Book getBookById(@PathVariable(name = "id")int id) {
			return bookService.getBookById(id);
		}
			
		@PostMapping("book")
		public Book addBook(@RequestBody Book book) {
			return bookService.addBook(book);
		}
			
		@PutMapping("book/{id}")
		public Book updateBook(@PathVariable(name = "id")int id,@RequestBody Book book ) {
			return bookService.updateBook(id, book);
		}
			
		@DeleteMapping("book/{id}")
		public Book delBook(@PathVariable(name = "id")int id) {
			return bookService.deleteBook(id);
		}
	}


Using ResponseEntity & http status code 
 ________________________________________

=> use ResponseEntity =wrap response object + httpstatus code + exceptional cases

// @RestController=@Controller + @ResponseBody
@RestController
@RequestMapping(path = "api")
public class BookRestController {

	private BookService bookService;

	@Autowired
	public BookRestController(BookService bookService) {
		this.bookService = bookService;
	}
	// , produces = MediaType.APPLICATION_JSON_VALUE

	// -------get all books-------------
	@GetMapping(path = "book")
	public ResponseEntity<List<Book>> getAllBooks() {
		return ResponseEntity.ok(bookService.getAllBooks()); // data + status code
	}

	// -------get an book-------------
	@GetMapping(path = "book/{id}")
	public ResponseEntity<Book> getAnBook(@PathVariable(name = "id") int id) {
		if(1==1)
			throw new NullPointerException();
		
		return ResponseEntity.ok(bookService.getById(id));// data + status code
	}

	// -------post an book-------------
	@PostMapping(path = "book")
	public ResponseEntity<Book> addAnBook(@RequestBody Book book) {
		return ResponseEntity
				.status(HttpStatus.CREATED)
				.body(bookService.addBook(book));
	}


	// -------update an book-------------
	@PutMapping(path = "book/{id}")
	public ResponseEntity<Book> updateAnBook(@PathVariable(name = "id") int id,
			@RequestBody Book book) {
		return ResponseEntity.ok(bookService.updateBook(id, book));
	}
	
	// -------delete an book-------------
	@DeleteMapping(path = "book/{id}")
	public ResponseEntity<Void> deleteAnBook(@PathVariable(name = "id") int id) {
		bookService.deleteBook(id);
		return ResponseEntity.status(HttpStatus.NO_CONTENT).body(null);
	}
	
}


Spring boot error handling
_________________________
@ResponseStatus(code=HttpStatus.NOT_FOUND)
public class BookNotFoundException extends RuntimeException{
	private static final long serialVersionUID = 4351688402749113855L;

}




@ControllerAdvice
@RestController
public class ExceptionHandlerController extends ResponseEntityExceptionHandler{
	@ExceptionHandler(Exception.class)
	public final ResponseEntity<Object> handleAllExceptions(Exception ex,
				WebRequest request) {
	       ErrorDetails errorDetails = new ErrorDetails(new Date(),
					ex.getMessage(), request.getDescription(false));
		return new ResponseEntity<Object>(errorDetails,HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ExceptionHandler(BookNotFoundException.class)
	public ResponseEntity<Object> handleBookNotFoundEx(
				BookNotFoundException ex, WebRequest req) {
		ErrorDetails details = new ErrorDetails(new Date(), "book not found",
					req.getDescription(false));
		return new ResponseEntity<Object>(details, HttpStatus.NOT_FOUND);
		}
	
		
	
}


//Error handling class
__________________
public class ErrorDetails {
	private Date timestamp;
	private String message;
	private String details;
}
		


Step 7: JSR 303 validation
__________________________

	step 0:Starting with Boot 2.3, we also need to explicitly add the spring-boot-starter-validation dependency:
	
	<dependency> 
	    	<groupId>org.springframework.boot</groupId> 
    		<artifactId>spring-boot-starter-validation</artifactId> 
	</dependency>


	step 1: apply jsr 303 annotation on pojo

	public class Book {
		private int id;
		private String isbn;
		@Size(min=2, message="title should have atleast 4 characters")
	}

	step 2: 
	public ResponseEntity<Book> createBook(@Valid @RequestBody Book book) {

	step 3:
	@Override
		protected ResponseEntity<Object> handleMethodArgumentNotValid			   (MethodArgumentNotValidException ex,
		    HttpHeaders headers, HttpStatus status, WebRequest request) {
		  ErrorDetails errorDetails = new ErrorDetails(new Date(), "Validation Failed",
		      ex.getBindingResult().toString());
		  return new ResponseEntity<Object>(errorDetails, HttpStatus.BAD_REQUEST);
		} 


	https://stackoverflow.com/questions/33663801/how-do-i-customize-default-error-message-from-spring-valid-validation

       @Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		//how to deal 
		BindingResult bindingResult = ex.getBindingResult();
		List<FieldError> fieldErrors = bindingResult.getFieldErrors();
		//? expore some method inside this fieldErrors and then put
		
		StringBuilder builder=new StringBuilder("validation failed for : ");
		
		for(FieldError fe:fieldErrors ) {
			builder.append(fe.getField()).append(" ,");
			
		}
		
		ErrorMessage errorMessage = new ErrorMessage(builder.toString(), 
				"rg@gmail.com", new Date());
		return new ResponseEntity<Object>(errorMessage, HttpStatus.BAD_REQUEST);
	}





Step 8: hateoas
______________
	HATEOAS- Hypertext as the engine of Application state
	Use link in the application state ( Response data)
	
	Advantage:
	the client can have a single entry point to the application and att the further action can be taken 
	based on the links in the response data
	Reduce dependency between client and service, so that the server can make changes to its URI 
	without breaking the client side code

	Implementation:
		RepresentationModel
		WebMvcLinkBuilder
		Link



step 1: put hateoas dependencies

step 2: enable static improt:

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;


step 3: change POJO class:

public class Book extends RepresentationModel<Book>{
}


step 4: get an book:
__________________
@GetMapping(path = "/book/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public EntityModel<Book> getBookById2(@PathVariable(name = "id") int id) {
		Link link=linkTo(methodOn(BookRestController.class).getBookById2(id)).withSelfRel();
		
		Book book = bookService.getBookById(id);
		book.add(link);
		
		return EntityModel.of(book);
	}


step 5: get all books:
____________________-
	// get all the books
	@GetMapping(path = "book", produces = MediaType.APPLICATION_JSON_VALUE)
	public CollectionModel<Book> getAllBooks() {
		List<Book> books = bookService.getAllBooks();
		for(Book book: books) {
			Link link=
					linkTo(methodOn(BookRestController.class).getBookById(book.getId()))
					.withSelfRel();
			book.add(link);
		}
		return CollectionModel.of(books);
	}



@GetMapping(path = "/book2/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public EntityModel<Book> getBookById2(@PathVariable(name = "id") int id) {
		Link link=
				linkTo(methodOn(BookRestController.class).getBookById2(id))
				.withSelfRel();
		
		Book book = bookService.getBookById(id);
		book.add(link);
		
		return EntityModel.of(book);
	}




 9. Swagger Documentation
_________________________

	=> Swagger is almost equivalent to SOAP formate, used for documentation of REST api
	=> how to Configuring Auto Generation of Swagger Documentation

	step 1:
	------
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>2.4.0</version>
    </dependency>

    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>2.4.0</version>
    </dependency>



basic config:
____________

@Configuration
@EnableSwagger2
public class SwaggerConfig {
	public Docket api() {
	    return new Docket(DocumentationType.SWAGGER_2);
	}
}


http://localhost:8080/swagger-ui.html





basic config: with basic customization
______________________________________

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {

	public static final Contact DEFAULT_CONTACT = new Contact("rajeev gupta",
			"http://abc.com", "rgupta.mtech@gmail.com");

	public static final ApiInfo DEFAULT_API_INFO = new ApiInfo(
			"Awesome API Title", "Awesome API Description", "1.0", "urn:tos",
			DEFAULT_CONTACT, "Apache 2.0",
			"http://www.apache.org/licenses/LICENSE-2.0");

	private static final Set<String> DEFAULT_PRODUCES_AND_CONSUMES = new HashSet<String>(
			Arrays.asList("application/json", "application/xml"));

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2)
				.apiInfo(DEFAULT_API_INFO)
				.produces(DEFAULT_PRODUCES_AND_CONSUMES)
				.consumes(DEFAULT_PRODUCES_AND_CONSUMES);
	}
}



=> Customization of swagger doc:
_________________________________
	=> how to tell about validation of rest api?
		eg: data can not be future

	=> annotate pojo with more annotations

@ApiModel(description="information about book")
public class Book {
	private int id;
	private String isbn;
	
	@ApiModelProperty(notes="should be min 4 char")
	



import io.swagger.annotations.Contact;
import io.swagger.annotations.ExternalDocs;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;

@SwaggerDefinition(
        info = @Info(
                description = "Awesome Resources",
                version = "V12.0.12",
                title = "Awesome Resource API",
                contact = @Contact(
                   name = "rajeev gupta", 
                   email = "rgupta.mtech@gmail.com", 
                   url = "http://abc.com"
                ),
                license = @License(
                   name = "Apache 2.0", 
                   url = "http://www.apache.org/licenses/LICENSE-2.0"
                )
        ),
        consumes = {"application/json", "application/xml"},
        produces = {"application/json", "application/xml"},
        schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS},
        externalDocs = @ExternalDocs(value = "Read This For Sure", url = "http://abc.com")
)
public interface UserApiDocumentationConfig {

}




@ApiModel(description="All details about the user. ")
public class User {

  private Integer id;

  @Size(min=2, message="Name should have atleast 2 characters")
  @ApiModelProperty(notes="Name should have atleast 2 characters")
  private String name;

  @Past
  @ApiModelProperty(notes="Birth date should be in the past")
  private Date birthDate;




	Step 10: Monitoring APIs with Spring Boot Actuator
	_______________________________________________

	=> Spring Boot Actuator auto-configures all enabled endpoints to be exposed over HTTP. 
	=> The default convention is to use the id of the endpoint with a prefix of /actuator as the URL path. 
		For example, health is exposed as /actuator/health.

	

______________________
Spring Boot Actuator
_______________________

Spring boot’s module Actuator allows you to monitor and manage 
application usages in production environment, without coding and configuration for any of them.
 These monitoring and management information is exposed via REST like endpoint URLs.



https://howtodoinjava.com/spring-boot/actuator-endpoints-example/

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always



Creating custom endpoint
________________________


customize existing endpoint
________________________

@Component
public class InternetHealthMetrics implements HealthIndicator {

	@Override
	public Health health() {
		return checkInternet() == true ? Health.up().withDetail("success code", "Active Internet Connection").build()
				: Health.down().withDetail("error code", "InActive Internet Connection").build();

	}

	private boolean checkInternet() {
		boolean flag = false;
		try {
			URL url = new URL("https://www.google.com");
			URLConnection connection = url.openConnection();
			connection.connect();
			flag = true;
		} catch (Exception e) {
			flag = false;
		}
		return flag;
	}
}

@Component
@Endpoint(id = "mytraining", enableByDefault = true)
public class MyEndPoint {

	@ReadOperation
	public MyEndPointResponse features() {
		return new MyEndPointResponse(263872, "Java training", "Active ");
	}

}

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
class MyEndPointResponse {
	private int id;
	private String name;
	private String status;
}







Step 11: Implementing some field Filtering for RESTful Service
______________________________________________________________

	What is i want to filter out some information from rest response


	Eg: I want to ignore field2? use annotation @JsonIgnore

	//@JsonIgnoreProperties(value={"field1","field2"})
	public class SomeBean {
		private String field1;

		@JsonIgnore
		private String field2;
		private String field3;
	}


	@RestController
	public class FilteringController {

		@RequestMapping("/filterdemo")
		public SomeBean getBean(){
			return new SomeBean("value 1", "value 2", "value 3");
		}

       		@RequestMapping("/filterdemo-list")
		public List<SomeBean> getBeanList(){
		
			List<SomeBean> beans=Arrays.asList(new SomeBean("value 1", "value 2", "value 3"),
				new SomeBean("value 1", "value 2", "value 3"));
			return beans ;
		}
	}





Step 12: Versioning RESTful Services 
__________________________________

 	Versioning?
 		-Media type versioning ( aka "content negotiation" or " accept header")- Github
 		-Custome headers versioning- Microsoft
 		-URI versioning -Twitter
 		-Parameter versioning -Amazon

 		-Factors effect decision
  		-url pollution
 		- misuse of http headers
  		- caching
  		- can we execute teh request on browser?
  		- api doc
 		- No perfect sol



Consider I have two version of person api over the time:

public class PersonV1 {
  private String name;

  public PersonV1() {
    super();
  }
 // ....
}

public class PersonV2 {
  private Name name;
	//........
}

public class Name {
  private String firstName;
  private String lastName;
 //.......

}

 How to handle this?


@RestController
public class PersonVersioningController {

  @GetMapping("v1/person")
  public PersonV1 personV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping("v2/person")
  public PersonV2 personV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/param", params = "version=1")
  public PersonV1 paramV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/param", params = "version=2")
  public PersonV2 paramV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/header", headers = "X-API-VERSION=1")
  public PersonV1 headerV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/header", headers = "X-API-VERSION=2")
  public PersonV2 headerV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

  @GetMapping(value = "/person/produces", produces = "application/vnd.company.app-v1+json")
  public PersonV1 producesV1() {
    return new PersonV1("Bob Charlie");
  }

  @GetMapping(value = "/person/produces", produces = "application/vnd.company.app-v2+json")
  public PersonV2 producesV2() {
    return new PersonV2(new Name("Bob", "Charlie"));
  }

}





Step 12: Enable cacheing
_______________________

step 1: add @EnableCaching to spring boot strap class...
step 2: put concurrentcachemanager to application ( latter will use production cache system)

		@Transactional
		@SpringBootApplication
		@EnableCaching
		public class Application {
		
			public static void main(String[] args) throws Exception{
				SpringApplication.run(Application.class, args);
			}
			
			@Bean
			public CacheManager cacheManager(){
				// ctr accept array of string, tell cache manages by cache manager
				ConcurrentMapCacheManager cacheManager=new ConcurrentMapCacheManager("books");
				return cacheManager;
				
			}
		}


	step 3:apply @Cacheable annotation to service layer

		@Service
		@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)
		public class BookServiceImp2 implements BookService{
		
			@Autowired
			private BookRepo bookRepo;
			
			@Override
			public List<Book> getAllBooks() {
				return bookRepo.findAll();
			}
		
			@Cacheable(value="books",key="#bookId" )
			@Override
			public Book getBookById(int bookId) {
				return bookRepo.getOne(bookId);
			}
		
			@CachePut(value="books", key="#result.id")
			@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
			@Override
			public Book addBook(Book book) {
				return bookRepo.save(book);
			}
		
			@CachePut(value="books", key="#result.id")
			@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
			@Override
			public Book updateBook(Book book) {
				return bookRepo.save(book);
			}
		
			@CacheEvict(value="books", key="#id")
			@Transactional(propagation = Propagation.REQUIRED, readOnly = false, 
					rollbackFor = BookNotFoundException.class)
			@Override
			public Book removeBook(int bookId) throws BookNotFoundException {
				Book book = bookRepo.getOne(bookId);
				if(book==null)
					throw new BookNotFoundException();
				else
				bookRepo.delete(bookId);
				return book;
			}
		
			@CacheEvict(value="books", allEntries=true)
			
			@Override
			public void evictCache() {
				// TODO Auto-generated method stub
				
			}
		}




Configuration ehcache cache manager:
____________________________________________
step 1: add dependencies: spring-boot-starter-cache, ehcache
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.10.6</version>
		</dependency>



step 2: create chcache configuration file with name : ehcache.xml
____________

<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="ehcache.xsd"
         updateCheck="true"
         monitoring="autodetect"
         dynamicConfig="true"
         diskPersistent="true">

<!--    <diskStore path="java.io.tmpdir" />-->
    <diskStore path="user.dir" />

    <cache name="books"
           maxEntriesLocalHeap="5"
           maxEntriesLocalDisk="10"
           eternal="false"
           diskSpoolBufferSizeMB="20"
           timeToIdleSeconds="3000"
           timeToLiveSeconds="6000"
           memoryStoreEvictionPolicy="LFU"
           transactionalMode="off"

           >
        <persistence strategy="localTempSwap" />
<!--        <persistence strategy="LOCALRESTARTABLE" />-->
    </cache>

</ehcache>


Step 3: dont forget to make book pojo Serializable:

	public class Book implements Serializable{
	}




Step 13: schedule processes
____________________________

	Note:
	The simple rules that we need to follow to annotate a method with @Scheduled are:

			a method should have the void return type
			a method should not accept any parameters

	step 1: put @EnableScheduling on bootstrap class

	step 2: create an component with @Scheduled annotation

		@Component
		public class ScheduledJob {
			private Logger logger = LoggerFactory.getLogger(this.getClass());
		
			@Autowired
			private BookService service;
		
			@Scheduled(cron = "0,30 * * * * *")
			public void cronJob() {
				logger.info("> cronJob");
		
				// Add scheduled logic here
		
				Collection<Book> books = service.getAllBooks();
				logger.info("There are {} books in the data store.", books.size());
		
				logger.info("< cronJob");
			}
		
			// after application startup delay of 5 sec, schedule to run each after 15
			// sec.
			@Scheduled(initialDelay = 5000, fixedRate = 15000)
			public void fixedRateJob() {
				logger.info("> fixedRateJob");
		
				// Add scheduled logic here
		
				Collection<Book> greetings = service.getAllBooks();
				logger.info("There are {} books in the data store.", greetings.size());
		
				logger.info("< fixedRateJob");
			}
		
		}


ref:
https://www.baeldung.com/spring-scheduled-tasks
https://www.tutorialspoint.com/unix_commands/crontab.htm





___________________________
web application with boot
___________________________

We need to put dependency:

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>


spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp



@Controller
public class BookController {

	private BookService bookService;

	@Autowired
	public BookController(BookService bookService) {
		this.bookService = bookService;
	}
	
	@GetMapping(path = "allbooks")
	public ModelAndView getallbooks(ModelAndView mv) {
		mv.setViewName("showall");
		mv.addObject("books", bookService.getAllBooks());
		return mv;
	}
}



put jsp in /bootapp/src/main/webapp/WEB-INF/views
____________________________________________________

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Book store application</title>
</head>
<body>
<body>
	<table>
		<thead>
			<tr>
				<th>book id</th>
				<th>book title</th>
				<th>book price</th>
			</tr>
		</thead>

		<tbody>
			<c:forEach var="b" items="${books}">
				<tr>
					<td>${b.id}</td>
					<td>${b.title}</td>
					<td>${b.price}</td>
				</tr>
			</c:forEach>

		</tbody>
	</table>
	<a href="addBook">Add new Book</a>
</body>

</body>
</html>





Converting jar to war and deploy over tomcat:
________________________________________
https://www.baeldung.com/spring-boot-war-tomcat-deploy





Spring boot log4j2 configuration:
___________________________________

Step 1: configure log4j2

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

Step 2: create log4j2.xml configuration file 

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN" monitorInterval="30">
    <Properties>
        <Property name="LOG_PATTERN">
            %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${hostName} --- [%15.15t] %-40.40c{1.} : %m%n%ex
        </Property>
    </Properties>
    <Appenders>
        <Console name="ConsoleAppender" target="SYSTEM_OUT" follow="true">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </Console>
    </Appenders>
    <Loggers>
        <Logger name="com.example.log4j2demo" level="debug" additivity="false">
            <AppenderRef ref="ConsoleAppender" />
        </Logger>

        <Root level="info">
            <AppenderRef ref="ConsoleAppender" />
        </Root>
    </Loggers>
</Configuration>




spring boot  configuration and profile:
____________________________________
=> unserstanding spring boot configuration
=> configure features in spring boot
	value , configprops, Actuator, spring profile, enviornment
=> spring cloud config server
=> dynamic configuration
=> best practices and patterns

=> config features in sprng boot
	value 
	configprops
	Actuator
	spring profiles
	environment
=> spring cloud config server

=> Dynamic configuration

spring boot ms configuration goals
__________________________________

	=> externalized
		property file should be externalized for loose coupling
	=> environment specfic
		test, prod, dev, default
	=> consistent
		In microservice we have many spring boot project that must have same configuration parameters, we 			should manage them centerally (using git) rather than locally
	=> version histroy
	    spring clould provide provision for version history using git
	=> real time management

	=> Dont hard code!

Spring boot profile hello world
__________________________

application.properties
____________________
hello.message=jug delhi
#spring.profiles.active=dev


application-dev.properties
hello.message=jug delhi dev



application.properties

hello.message-test=jug delhi test



@RestController
public class Hello {

	@Value("${hello.message}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}


Running from cmd:
______________
java -jar demo-0.0.1-SNAPSHOT.jar --hello.message="hello to spring boot channed message"


running on differnt port:
_________________________

java -jar  jpa_demo2-0.0.1-SNAPSHOT.jar --server.port=8050



Providing default value with @Value annotation , so that config not fail at run time:
_______________________________________________

@RestController
public class Hello {

	@Value("${hello.message: default value}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}


What if properties is a list/map?
____________________________

Ex:
my.list.values=java,python,web


@Value("${my.list.values}")
private List<String> values;



my.todo={java:"cloud",python:"AI"}

//EL 
@Value("#{${my.todo}}")
private Map<String, String> toDo;




@ConfigurationProperty annotation:
___________________________________

	=> annotation for pulling for group of configuration



Consider properties:
_____________________

spring.datasource.url=jdbc:mysql://localhost:3306/kr_jdbc?useSSL=false
spring.datasource.username=root
spring.datasource.password=root



@Configuration
@ConfigurationProperties("spring.datasource")
public class DbConfig {
	private String url;
	private String username;
	private String password;
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	
}

Now testing it:
______________

@RestController
public class Hello {
	
	@Autowired
	private DbConfig dbConfig;
	
}



Example application for Excercise:
_______________________________
product store app:

Product
___________
productId
productName
productPrice
productDiscount
productCategory
expiryDate
productQuantity








Imp links:
__________
https://www.mkyong.com/spring-boot/spring-boot-spring-data-jpa-java-8-date-and-time-jsr310/
http://stackoverflow.com/questions/24351581/how-does-the-enableautoconfiguration-spring-annotation-work

how to convert boot project to war
http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file

how to logging 
http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html

great way to learn spring boot
https://springframework.guru/using-log4j-2-spring-boot/

https://semaphoreci.com/community/tutorials/testing-rest-endpoints-using-rest-assured
https://github.com/basdijkstra/workshops/tree/master/rest-assured

mkyoung for basic understanding of cacheing
https://www.mkyong.com/spring/spring-caching-and-ehcache-example/

http://howtodoinjava.com/spring/spring-restful/spring-restful-client-resttemplate-example/

https://david-kerwick.github.io/2018-01-17-dealing-with-java-8-localdate-in-jsp-s/

how-to-hide-endpoints-from-swagger-documentation:
_________________________________________________

https://stackoverflow.com/questions/55010362/how-to-hide-endpoints-from-swagger-documentation-with-springfox
https://github.com/springfox/springfox/issues/2437


