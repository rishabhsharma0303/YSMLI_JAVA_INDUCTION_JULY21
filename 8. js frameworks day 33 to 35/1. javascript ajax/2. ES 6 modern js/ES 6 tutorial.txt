ES 6 tutorial: ES 6 new enhancements
____________________________
0. setup
1. var hoisting and function scope
2. const in ES 6
3. Arrow function, functional programming in js
4. Default value to function arguments
5. Rest operation in ES 6 ( aka variable arguemnt methods of java)
6. Spread operator in es 6
7.Spread operator with object literals
8. Destructuring arrary
9. Destructuring objects
10. String templetes
11. for of loop: used with iterables
12. Es6 classes
	-3 type of functions in a class
	- class inheritance
1. setup
2. var let , const and scope in es6
3. templet literal 
4. arrow function 
	1. consize code
	2. implicit return
	3. no 'this' binding
5. object Destructuring
6. Classes and Inheritance




0. setup
__________

setup : install node
	visual code
	npm install http-server -g

hello world:
---------
console.log("hello to es6");

run:
---
http-server -p 8085



1. var let and scope in es6
_____________________________
 => variable declared in js is done with var
 => ES 6 introduced: let and const


problem with var:
__________________

a). scoping problem
________________


	=> scope of js variable is by default method scope ie
	=> C/Java are block scoped NOT IN JS

	eX:


	var flag=true;
	if(flag){
		var fname="rajeev";
	}
	console.log(fname); // can be accessed




	=> our understanding ( from C) is that the life of fname should be within the block!

	var flag=true;
	if(flag){
		var fname="rajeev";
	}

	console.log(fname); // can be accessed


	ex2:

	 for(var i=0;i<10;i++){
		var fname="rajeev";
		console.log(fname +": " + i);
	}


	console.log(i);//still accessable?

	As we have declared variable outside if

	=> in javascript var has function scope

	Advantage of let:
	__________________
	=> it solve scope issure with js


if(flag){
	let fname="rajeev";
	console.log(fname);
}
console.log(fname);// give error

	
b). hoisting problem
__________________
what is op?

console.log(x);
var x=33;


op: undefined ! hoisting problem

 	=> at compilation time js engine allocate memeory, at compilation time decleation is done
		and value is assigned at run time!

	=> let dont allow hoisting :)


console.log(x);
let x=33;

gives error!

c). you can declared var variable multiple time
_________________________________________

	=> consider following code:

var greeting="good morning";
console.log(greeting);


// after 100s of line of code by mistake: overriding variable by mistake
var greeting="good eve";
console.log(greeting);

	=> it produce output! but it should have thrown error that multiple re decleation of variable

	=> this problem solved by let, Identifier 'greeting' has already been declared


4. const same as java
___________________
const pi=3.1415;
console.log(pi);
pi=3.14;//error



Examples: var vs let:
______________________

what is the op of function when called?
_______________________________________

function greetPerson(name){
    if (name==="rajeev"){
        var greet="hello programmer";
    }else{
        var greet="hello person";
    }

    console.log(greet);
}
















=> var is declared two time! its ok in js
=> value of var is overriden second time


function greetPerson(name){
    if (name==="rajeev"){
         greet="hello programmer";
    }else{
         greet="hello person";
    }
     var greet;
    console.log(greet);
}

=> In this case js put var greet on the top of method defination (var hoisting )
=> scope of var is function scope ( not the block scope!)
=> var decleration is bit tricky ==> js introduce let and const



what is the op of function with let?
_______________________________________

function greetPerson(name){
    if (name==="rajeev"){
        let greet="hello programmer";
    }else{
        let greet="hello person";
    }

    console.log(greet);
}

Uncaught ReferenceError: greet is not defined
    at greetPerson (main5.js:8)
    at <anonymous>:1:1



Solution:
function greetPerson(name){
    let greet;
   
    if (name==="rajeev"){
         greet="hello programmer";
    }else{
         greet="hello person";
    }

    console.log(greet);
}


What about below code?
------------------------
function greetPerson(name){

    if (name==="rajeev"){
         greet="hello programmer";
    }else{
         greet="hello person";
    }

    console.log(greet);

    let greet;
}

=> dont compile , no hoisting with let!



What is the op?
_____________

var a=1;
var b=10;
if(a==1){
    var a=10;
    let b=20;
    console.log(a);
    console.log(b);
}
console.log(a);
console.log(b);



	=> let is blocked scope ( as it happens in c/c++/java)
	=> var is function scope












redecleration of var vs let
____________________

 var a=1;
 var a=10;	works

 let a=1;
 let a=10;  gives error




 var vs let in a loop
___________________

for(var i=0; i<10;i++){
    console.log(i);
}

console.log("====="+i);

 => what if we replace var with let



const in ES 6 Examples:
___________________
	=> same as const in c++, final in java

	
 Ex:
let num=1;
const num2=10;
num2=33;

=> TypeError: Assignment to constant variable.


const in ES 6 objects:
___________________
const obj1={
    name:"raj"
}
obj1={
    name:"ravi"
}

=> TypeError: Assignment to constant variable.


const obj1={
    name:"raj"
}
obj1.name="rajeev";

=> u can change the value inside obj1





3. Arrow function, functional programming in js
___________________________________________
=> arrow function support functional programming in js
=> short hand notation

Ex:
var a=function(){
    return 10;
}

var b=()=>10;
const adder=(a, b)=> a+b;


console.log(b);


functional programming with javascript:
_________________________________________

filter , map, reduce, sort 
//functional programming in es 6
const companies = [
	{name: "Company One", category: "Finance", start: 1981, end: 2003},
	{name: "Company Two", category: "Retail", start: 1992, end: 2008},
	{name: "Company Three", category: "Auto", start: 1999, end: 2007},
	{name: "Company Four", category: "Retail", start: 1989, end: 2010},
	{name: "Company Five", category: "Technology", start: 2009, end: 2014},
	{name: "Company Six", category: "Finance", start: 1987, end: 2010},
	{name: "Company Seven", category: "Auto", start: 1986, end: 1996},
	{name: "Company Eight", category: "Technology", start: 2011, end: 2016},
	{name: "Company Nine", category: "Retail", start: 1981, end: 1989}
  ];
  
  const ages = [33, 12, 20, 16, 5, 54, 21, 44, 61, 13, 15, 45, 25, 64, 32];

  //printing all companies details
 _________________________________

  for(let i=0; i< companies.length; i++){
	  console.log(companies[i]);
  }



 //funcational way: forEach
_________________________________

companies.forEach(function(company){
	console.log(company);
})

//funcational way: forEach using => operator
companies.forEach(company=>console.log(company))


// all ages 21 and over
________________________
const selectedAges=ages.filter( function(age){
	if(age>= 21){
		return true;
	}

})
const selectedAges=ages.filter( age=>age >=21);
console.log(selectedAges);



//fiter retail companies
______________________
const retailCompanies=companies.filter(function(company){
	if(company.category=="Retail"){
			return true;
	}
})

console.log(retailCompanies);


//fiter retail companies
_______________________
const retailCompanies=companies.filter(company=>company.category==="Retail");
console.log(retailCompanies);



//filter all 80's companies
___________________________
const companies80=companies.filter(function(company){
	if(company.start>=1980 && company.start<=1990){
		return true;
	}
});

console.log(companies80);
const companies80=companies.filter(company=>(company.start>=1980 && company.start<=1990));


//company last for >= then 10 yr
_________________________________
const companiesMore10= companies.filter(function(company){
	if((company.end-company.start)>=10){
		return true;
	}
})

console.table(companiesMore10);
const companiesMore10= companies.filter(company=>(company.end-company.start)>=10)


map=> convert something to something else
_______________________________________

//create array of company names
const companyNameArr=companies.map(function(company){
	return company.name;
})

console.log(companyNameArr);
const companyNameArr=companies.map(company=>company.name)


create array of company names and start date -end date
__________________________________________
// comapnyName[2009-2017]

const companyNameArr2=companies.map(function(company){
	return `${company.name} [${company.start}--${company.end}]`;
})

console.table(companyNameArr2);


Sorting: sorting companies basis on start year
_______________________________________________
const sortedComanies=companies.sort(function(c1, c2){
	return	(c1.start> c2.start)?1:-1;
});

console.table(sortedComanies);




4. Default value to function arguments
____________________________________
let getValue=function(a){
    console.log(a);
}

let getValue=function(a=10){
    console.log(a);
}


let getValue=function(a=10, b=4){
    console.log(a);
}


getValue(undefined, 12);


5. Rest operator in ES 6 ( aka variable arguemnt methods of java)
________________________________________________________________

let displayColor=function(){
    console.log(message);
    for(let i in arguments){
        console.log(arguments[i]);
    }
}

let message="list of color";

displayColor(message, "red","black","blue");

	=> confusion for java developers

	=> ES 6 introduce rest operator
	
	=>  ...colors are rest parameters



let displayColors = function(message, ...colors){

     console.log(message);
     console.log(colors);
     
     
    for(let i in colors){
        console.log(colors[i]);
        
    }
}

let message = "List of Colors"

displayColors(message, 'Red');
displayColors(message, 'Red','Blue');
displayColors(message, 'Red','Blue','Green');



6. Spread operator in es 6
____________________________

=> take an arry and split in individual elements
	=> What if we try to pass

	
	let colorArray = ['Orange','Yellow','Indigo'];
	displayColors(message,colorArray)

	=> it dont work
	=> ES 6 introduce spread operator

	
	let colorArray = ['Orange','Yellow','Indigo'];
	displayColors(message, ...colorArray)


7.Spread operator with object literals
_________________________________
=> let consider

let firstname = "rajeev";
let lastname = "gupta";

//object literal
let person = {
    firstname:firstname,
    lastname:lastname
};

console.log(person.firstname);
console.log(person.lastname);


=> ES 6 introduce easy way to represent object liternal
=> if the property name is same as variable name, we dont need to mention in object literal

let person = {
    firstname,
    lastname
};


console.log(person.firstname);
console.log(person.lastname);


=> Same happends when we retrun value from a function
---------------------------------------------------

function createPerson(firstname, lastname, age){
    let fullname = firstname + " " + lastname;
    return {firstname,lastname,  fullname}
}

let p = createPerson("rajeev","gupta", 62);
console.log(p.firstname);
console.log(p.lastname);
console.log(p.fullname);


=> shorthand notation in case of function we can ommit function keyword and :
______________________________________________________________

function createPerson(firstname, lastname, age){
    let fullname = firstname + " " + lastname;
    return {
        firstname,
        lastname, 
        fullname,
	//isSenior:function()
        isSenior{
            return age>60;
        }}
}

let p = createPerson("rajeev","gupta", 62);
console.log(p.firstname);
console.log(p.lastname);
console.log(p.fullname);
console.log(p.isSenior());





8. Destructuring arrary
___________________________

=> ie pulled apart elements of an arrray

let employee = ["rajeev", "gutpa", "Male"];

	//Destructuring arrary

let [fname, lname, gender] = employee;

console.log(fname);
console.log(lname);
console.log(gender);

	=> What if gender is not present?

	let [fname, lname, gender="Male"] = employee;


	=> What if we want to skip fname and lname
	
let [, , gender] = employee;	// will only accept gender


let [fname, ...elements] = employee; //will hold rest elements in an array



9. object Destructuring 
____________________

consider example:

const msg={
    name: "rajeev gupta",
    desi:"trainer",
    hobby:"traveling",
    social:{
        twitter:"@rajeev_gupta76",
        facebook:"https://www.facebook.com/profile.php?id=100021806671318"
    }
}

//how to print it
const name=msg.name;
const desi=msg.desi;
const hobby= msg.hobby;
const twitter=msg.social.twitter;

console.log(name);
console.log(hobby);
console.log(twitter);

//difficult to get data out of object and print it


object Destructuring  provide easy syntex to do the same operation!
____________________________________________________________
const {name, desi, hobby, social}=msg;
console.log(name);




10. templete literal : String templetes
____________________________________

const person={
	name:"rajeev gupta",
	address:"delhi",
	phone:"43544344444"
};

let strMsg= "my name is "+ person.name+": "+ " my address is "+ person.address;

it is compilcated !


Easy:
let strMsg2=`my name is ${person.name} and my address is ${person.address}`;

	=> templet literal remember formatting no need of \t \n  etc

const strMsg3=`
	my name is ${person.name}
	my address is ${person.address}
	mmy phone is ${person.phone}
`	

	=> function_name `some thing and ${something}`


calling function with templete litral
_______________________________________
function bio(x){
	console.log(x);
}

const person={
	name:"rajeev gupta",
	address:"delhi",
	phone:"43544344444"
};


bio `
my name is ${person.name}
my address is ${person.address}
mmy phone is ${person.phone}
`;



11. for of loop: used with iterables
______________________________________
let colors = ['Red', 'Blue', 'Green'];

for(let index in colors){
    console.log(colors[index]);
    
}


//better code
for(let color of colors){
    console.log(color);
    
}


//with strings
let letters = "ABC";

for(let letter of letters){
    console.log(letter);
    
}



12. classes:
_______________
	=> JavaScript classes have unique features that embrace the
 	dynamic nature of the JavaScript
	=> before ES 6 JavaScript had no classes.
	=> To mimic a class, we use a constructor function

class Person{
    greet(){}
}

let p = new Person();

console.log(p.greet === Person.prototype.greet);

 => Under the hood classes of ES 6 are functions
 => not hoisted ie
 => javscript classes are only sntex suger to existing prototype based inheritance

	What if i write:
	________________
	employee(); //calling function before defination, js do hoisted and op is undefined!

	function employee(){}

 	=> let we do same with classes ( gives error GOOD)
	_____________________________________

	let p1=Employee(); //calling function before defination, js do hoisted and op is undefined!
	class  employee(){}



prior ES6:
______________

function Animal(type) {
    this.type = type;
}
 
Animal.prototype.identify = function() {
    console.log(this.type);
}
 
var cat = new Animal('Cat');
cat.identify(); // Cat

=> how it works?
________________

	=> First, we created the Animal as a constructor function 
		that has a property name called type.

	=>  The identify() method is assigned to the prototype so that it can be shared
		 by all instances of the Animal type.

	=> Then, we created a new instance of the Animal type using the new operator. 
	The cat object, hence, is an instance of the Animal and of Object through 
	prototypal inheritance.


ES6 introduced a new syntax for creating a class:
_______________________________________________

class Animal {
    constructor(type) {
        this.type = type;
    }
    identify() {
        console.log(this.type);
    }
}
 
let cat = new Animal('Cat');
cat.identify();


	=> The class declaration is just syntactic sugar of the constructor function,
	 therefore, the result of the  typeof operator of the Animal class is  function.


	console.log(typeof Animal); // function

Class vs. custom type
______________________
	
	=> First, class declarations are not hoisted like function declarations.
	 For example, if you place the following code above the Animal class declaration section, 
	 you will get a ReferenceError.


	let dog = new Animal('Dog');
	// Uncaught ReferenceError: Animal is not defined


	=> calling the class constructor without the new operator will result in an error

	let duck = Animal('Duck');
	// Uncaught TypeError: Class constructor Animal cannot be invoked without 'new'




JavaScript class expressions:
____________________________
	=> A class expression does not require an identifier after the class keyword. 

	=> We  can use class expressions in variable declarations and pass
	 them into a function as an argument


let Animal = class {
    constructor(type) {
        this.type = type;
    }
    identify() {
        console.log(this.type);
    }
}
 
let duck = new Animal('Duck');
 
console.log(duck instanceof Animal); // true
console.log(duck instanceof Object); // true
 
console.log(typeof Animal); // function


js classes are First-class citizen:
________________________________

	=> JavaScript class is a first-class citizen. 
	It means that you can pass a class into a function,
	 return it from a function, and assign it to a variable.


function factory(aClass) {
    return new aClass();
}
 
let greeting = factory(class {
    sayHi() {
        console.log('Hi');
    }
});
 
greeting.sayHi(); // 'Hi'



Singleton with class:
_____________________

	iffi
let app = new class {
    constructor(name) {
        this.name = name;
    }
    start() {
        console.log(`Starting the ${this.name}...`);
    }
 
}('Awesome App');
 
app.start(); // Starting the Awesome App.



Getter and setter:
________________

class Person {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    get fullName() {
        return this.firstName + ' ' + this.lastName;
    }
 
    set fullName(str) {
        let names = str.split(' ');
        if (names.length === 2) {
            this.firstName = names[0];
            this.lastName = names[1];
        } else {
            throw 'Invalid name format';
        }
 
    }
}
 
let mary = new Person('rajeev', 'Gupta');
console.log(mary.fullName); // Mary Doe
 
// set new name
mary.fullName = 'Rajeev Gupta';
console.log(mary.fullName); // Rajeev Gupta



Static methods:
________________

class Animal {
    constructor(type) {
        this.type = type;
    }
    identify() {
        console.log(this.type);
    }
    static create(type) {
        return new Animal(type);
    }
}
 
var mouse = Animal.create('Mouse');
mouse.identify(); // mouse


Note: attempt to access the static method from an instance of the class results in an error.

mouse.create('Monkey'); 
// Uncaught TypeError: mouse.create is not a function



inheritance (syntex suger)
_______________________________
	=> js dont support inheritance as in java, it use prototype inheritane
	=> function is used for creating class
	=> just to make life easy for java/c# dev

	Let we first understand how classical js support oops using function and support 
	prototype inheritance


class Animal {
    constructor(legs) {
        this.legs = legs;
    }
    walk() {
        console.log('walking on ' + this.legs + ' legs');
    }
}
 
class Bird extends Animal {
    constructor(legs) {
        super(legs);
    }
    fly() {
        console.log('flying');
    }
}
 
 
let bird = new Bird(2);
 
bird.walk();
bird.fly();


Ex2:
class Bird extends Animal {
    constructor(legs, color) {
        super(legs);
        this.color = color;
    }
    fly() {
        console.log('flying');
    }
    getColor() {
        console.log(this.color);
    }
}
 
 
let pegion = new Bird(2, 'white');
console.log(pegion.getColor())



Shadowing methods:
________________

	=> JavaScript allows you to add a new method in the derived class
	 that has the same name as a method in the base class. In this case, when 
	you call the method of an object of the derived class,
	 that method will shadow the method in the base class.

class Dog extends Animal {
    constructor() {
        super(4);
    }
    walk() {
        console.log(`go walking`);
    }
}
 
let bingo = new Dog();
bingo.walk(); // go walking


Note:
to call method of  base class in the derived class, 
	you use super.method() like this:



class Dog extends Animal {
    constructor() {
        super(4);
    }
    walk() {
        super.walk();
        console.log(`go walking`);
    }
}
 
let bingo = new Dog();
bingo.walk();
// walking on 4 legs
// go walking


13. set and map in es 6
__________________________
	=> no set and map in es5
	=> very difficult to have set in es 5

	Ex:
let mySet=Object.create(null); // creating an object with null properties
mySet.id=1;

if(mySet.id){
	console.log("id exisits");
}else{
	console.log("id dont exisits");
}	

op: "id exisits";


but what in case of:
------------------------
mySet.id=0;

if(mySet.id){
	console.log("id exisits");
}else{
	console.log("id dont exisits");
}

op: "id exisits"; //confusion!


How to define map in es 5?
--------------------------

let myMap = Object.create(null);
myMap.name ="rajeev";
let val = myMap.name;
console.log(val);


myMap[100] = "Hello";
console.log(myMap["100"]); //both 100 and "100" treated same way! what if i need both?


what in case of map of objects?
------------------------------
let ob1 = {};
let ob2 = {};

myMap[ob1] = "World";

//print same value! why? as string representation of both ob1 and ob2 are same
console.log(myMap[ob2]);
console.log(myMap[ob1]);

console.log(ob1.toString());
console.log(ob2.toString());


Defining set in es6
=================
 let mySet = new Set();
 mySet.add(1);
 mySet.add(1);

 What is the size?
 console.log(mySet.size); // op 1


What is the size in case of objects?
---------------------
let ob1 = {};
let ob2 = {};
 console.log(mySet.size); //2, as two objects are unique



 u can anything in set
------------------------
 mySet.add("Hello");
 mySet.add(1);
 mySet.add(ob1);
 mySet.add(ob2);
 console.log(mySet.size);

console.log(newSet.delete(1));
 console.log(newSet.size);



 what if adding array?
---------------------
 let newSet = new Set([1,2,3,4,4,4]);
 console.log(newSet.size);

builder pattern
----------------
 let chainSet = new Set().add("hello").add("world");
 console.log(chainSet.size);

 
 
Map in es6
===============

	=> order list of k--> value, type of key is  string/object
	=> decleration 

	let myMap=new Map();
	myMap.set("name","raj");
	myMap.set("job","trainer");

	console.log(myMap.get("name");

	map with object as key:
	--------------------
	let myMap=new Map();
	let obj1={};
	let obj2={}:

	myMap.set(obj1,10);
	myMap.set(obj2,20);

	console.log(myMap.get(ob1));


	size of map:
	-----------
	console.log(myMap.size());

	is map has a key?
	---------------------
	console.log(myMap.sizehas("name));

	remove key-> value
	-----------------
	myMap.delete("name");
	console.log(myMap.size());

	clear all value from map
	-----------------
	myMap.clear();


Using array to initilize map:
------------------------
let myMap = new Map([["name","rajeev"], ["job","trainer"]]);



Iteration over map to print only keys:
----------------------------------
	for( let key of myMap.keys()){
		console.log(key);
	}

Iteration over map to print only values:
----------------------------------
	for( let value of myMap.values()){
		console.log(value);
	}


Iteration over map to print both key and values:
----------------------------------
	for( let entry of myMap.entries()){
		console.log(`${entry[0]}--> ${entry[1]}`);
	} 


var numbers = [2,4,6,8];
numbers.forEach(arrayFunction);
function arrayFunction(element,index,array){
  console.log("arr["+index+"]= "+element);
};




/*
let myMap = new Map([["fname","Chandler"],
                     ["lname","Bing"]]);
myMap.forEach(mapFunction);
function mapFunction(value,key,callingMap){
  console.log(key+" "+value);
  console.log(myMap === callingMap);
}  
*/




/*
let mySet = new Set([1,2,3]);
mySet.forEach(setFunction);
function setFunction(value,key,callingSet){
  console.log(key+" "+value);
  console.log(mySet === callingSet);
}
*/




Weak map in es6
================
 let myMap = new WeakMap();
let ob1 = {};
myMap.set(ob1,"Hello World");
console.log(myMap.get(ob1));
ob1 = null;


Tutorial for js:
---------------
https://www.javascripttutorial.net/









	
