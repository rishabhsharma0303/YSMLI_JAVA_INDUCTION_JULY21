Mongo db
___________


1. installation and hello world
2. CRUD
3. Indexes, help
4. mongo db <->Java
5. mongodb spring boot


installation and hello world
________________________

	1. Extract mongodb-win32-x86_64-2.2.3.zip in C drive
	2. rename extracted folder to mongodb
	3. create data folder c:\data\db
	3. path =C:\mongodb\bin
	4. running mongodb server command mongod; mongo server listining on port 28017
		http://localhost:28017/

	5. Connecting to mongodb; mongo
		you are connected to mongo shell.......

https://www.mongodb.org/dl/win32/x86_64

RDBMS 	MongoDB
______________

Table 	<--->	Collection
Column 	<--->	Key
Value 	<--->	Value
Records/Rows<--->Document/Object


Creating collections, document, storing data etc:
__________________________________________

show dbs 		// List all databases
use rajdb 		//Switches to inventory
show collections  	//List all tables in the current selected database

Creating collections, document, storing data etc
__________________________________________

	use rajdb;	// create as well switch to rajdb

	inserting record
	_____________

	db.employees.insert({empName:"ekta", age:"36", salary:"60000"})
	db.employees.insert({empName:"raj",email:"r@r.com", age:"36", salary:"60000"})
	db.employees.insert({empName:"ravi",email:"r@r.com", age:"36", salary:"60000"})
	db.employees.insert({empName:"ravi",email:"r@r.com", age:"39", salary:"60500", add:"delhi"})

	showing all the records
	_____________________-
	db.employees.find()	// Equivalent to show all

	index 
	_____________________________________________________
	=> it will validate previous data if validation fail u cant apply this

	db.employees.ensureIndex( { empName: 1, email: 1 }, { unique: true } );
	

	CRUD
	______
	 db.employees.update({empName:"raj"},{$set:{salary:"90400"}})

	Update: db.employees.updateMany({empName:"raj"},{$set:{salary:"90400"}})

	findAll: db.employees.find();

	findAnParticularEmployeee: db.employees.find({empName:"amit"})

	delete: db.employees.remove({empName:"raj", "email" : "r@r.com"})





mongodb Quaries selector examples:
_________________________________
show dbs 		// List all databases
use inv 		//Switches to inventory
show collections  	//List all tables in the current selected database

db.status

db.inventory.insertMany([{ _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] },
{ _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] },
{ _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] },
{ _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] },
{ _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }]);


getting all records:
___________________
db.employees.find()


find by id:
__________
db.inventory.find({"_id":2});

find by qty less then 20:
______________________

db.inventory.find({qty:{$lt:20}});

find all contain tags B
______________________

db.inventory.find({tags:"B"});

find all contain only tags B
______________________

db.inventory.find({tags:["B"]});



find all contain only in A, B
_____________________________
db.inventory.find({tags:{$in:["A","C"]}})


https://docs.mongodb.com/manual/reference/operator/query-comparison/




Query Selectors: Logical - $and, $or, $nor
______________________________________
db.inventory.find({$and: [{qty:{$gt:20}},{tags:"A"}]})
















	Note:
	_____
	To delete all records from a table, uses db.tablename.remove()
	To drop the table, uses db.tablename.drop()
	Indexing-Speed up serching

	
	getting infromation about indexes:
	______________________________
	db.employees.getIndexes()

	In order to create an index
	___________________
		 uses db.tablename.ensureIndex(column)

		Eg:
		db.employees.ensureIndex({empName:1})


	https://docs.mongodb.com/manual/core/index-single/
	http://grokbase.com/t/gg/mongodb-user/11crp59gtt/what-is-the-meaning-of-ns-and-v-in-the-context-of-indexes

	To drop indexes
	___________
		 uses db.tablename.dropIndex(column). 

		Eg: db.employees.dropIndex({empName:1})


	To create an unique indexes
	________________________-
		 uses db.tablename.ensureIndex({column},{unique:true})
	
		Eg: db.employees.ensureIndex({empName:1},{unique:true});



	Help
	______-
	help  All available commands

	db.help()  Shows help on db

	db.collection.help()	
		Eg: db.employees.help()  

	db.collection.function.help()
		db.employees.find().help()  



	More commands
	_________
	finding one collection: db.employees.dav.findOne()


	Some more examples
	______________=

	> db.users.save( { name: 'foo',  surname : 'bar', age : '36' } )

	> db.users.find()

	> db.users.update( { name: 'foo' },  { $set: { 'age' : '24' } } )


	
	Examples;
	__________

	find(): Returns a cursor containing a number of documents

	All users: 
		db.users.find()
		db.users.find({ _id: 42})
	 db.employees.find({_id:ObjectId("5b7ce72981d101d12438464d")})

	Age between 20 and 30:
		db.users.find( { age: { $gt: 20, $lt: 30 } } )

	Subdocuments: ZIP 5026
		db.users.find( { address.zip: 5026  } )

	
	db.users.find
	({ $or: [
                 { name : "ruben" },
                 { age: { $lt: 30 } }
             ]})

	Projection: Deliver only name and age
	db.users.find({ }, { name: 1, age: 1 })




Example:


creating db
----------------
use employeeDb
	-> will switch to new db employeeDb

inserting document
---------------------
db.emp.insert({"Employeeid" : 1,"EmployeeName" : "raja"})


Add MongoDB Array using insert()
-------------------------------
{empName:"ekta", age:"36", salary:"60000"}


js object  vs json object:
----------------------


var myEmployee=[{empName:"p", age:23, salary:60000},{empName:"q", age:36, salary:80000},{empName:"r", age:56, salary:6900}  ];





	db.employees.insert(myEmployee);


java 8 code: stream prog

printing all employee in json
--------------------------------
db.employees.find().forEach(printjson)


Mongodb ObjectId()
-------------------
	db.emp.insert({_id:10, "EmployeeName" : "Smith"})



	=> By default when inserting documents in the collection,
	if you don't add a field name with the _id in the field name, 
	then MongoDB will automatically add an Object id field.

	=> Why do we need the ObjectId field? 
		Well, MongoDB uses this as the primary key for the collection so that 
		each document can be uniquely identified in the collection.

	=> If we want mongodb dont create  _id Field when the collection is created and 
	if you want to specify your own id as the _id of the collection, then you need to 
		explicitly define this while creating the collection


	



performing Quaries
--------------------
MongoDB Query Document using find()
-----------------------------------

db.emp.find().forEach(printjson)

	or
db.emp.find({})		//empty query document ie 

finding an particular employee
------------------------------
db.emp.find({EmployeeName : "Smith"}).forEach(printjson);


finding emp whose id> 2
---------------------------
db.emp.find({Employeeid : {$gt:2}}).forEach(printjson);





MongoDB cursor
------------------
	=> When the db.collection.find () function is used to search for documents in the 
	collection, the result returns a pointer to the collection of documents 
	returned which is called a cursor.

	=> By default, the cursor will be iterated automatically when the result 
	of the query is returned. 

	=> But one can also explicitly go through the items returned in the cursor one by one.

	=> Eg, if we have 3 documents in our collection, the cursor will point to the first document
	 and then iterate through all of the documents of the collection.


var emps = db.employees.find( { age : { $gt:23 }});

while(emps.hasNext()){print(tojson(emps.next()));}?
 ?



MongoDB Query Modifications using limit(), sort()
-------------------------------------------------

Limits
------
	=> Limit the number of documents which are returned in the result set for a query. 


	db.emp.find().limit(2).forEach(printjson);

Orders
--------
	=> One can specify the order of documents to be returned based on ascending or descending order 
	of any key in the collection.

	=> -1 indicates that we want to return the documents based on the descending order of Employee id. 

	db.emp.find().sort({Employeeid:-1}).forEach(printjson)



MongoDB Count() & remove() function
----------------------------------

	=> counting no of records

	db.emp.count()


Deleting Documents
-------------------
	db.emp.remove({Employeeid:22})

Update() Document
---------------
	db.employees.update({"_id" : ObjectId("5d523b9ca26cf34033b3bca7")},{$set: { "empName" : "ravi kumar"}});

Updating multiple values
--------------------------
db.emp.update
	(
		{
			Employeeid : 1
		},
		{
			$set :
			{
				"EmployeeName" : "NewMartin"
				"Employeeid" : 22
			}
		}
	)


