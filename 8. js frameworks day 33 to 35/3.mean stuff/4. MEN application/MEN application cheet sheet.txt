mongoose with nodejs
_____________________
MEAN demo example:
____________________
Angular<--------> Express <------> mongodb
		Nodejs		   mongoose	



crud application: book application
________________________________

use rajdb33;	
steps 1: create databse and collections
db.books.insert({
    title: 'java head first',
    author: 'katthy',
    category: 'java'
})

db.books.insert({
    title: 'spring in action',
    author: 'foo',
    category: 'spring'
})

db.books.insert({
    title: 'MEAN in action',
    author: 'bar',
    category: 'bar'
})

db.books.find();


step 2: create an project
	npm init 
	install express mongoose body-parser

	npm install express --save

step 3: create book model using mongoose


Book.model.js
________________

var mongoose = require('mongoose');
var Schema = mongoose.Schema;

var BookSchema = new Schema({
  title: String,
  author: String,
  category: String
});

module.exports = mongoose.model('Book', BookSchema);



What is  body-parser?
______________________
	To handle HTTP POST request in Express.js we need to install middleware module called body-parser.
	body-parser extract the entire body portion of an incoming request stream and exposes it on req.body.

	This body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request. 


step 4: app.js==> CRUD operation
____________________________

var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var Book = require('./Book.model');

var port = 8080;
var db = 'mongodb://localhost/rajdb33'

mongoose.connect(db, { useNewUrlParser: true, useUnifiedTopology: true});

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({
  extended: true
}));

app.get('/', function(req, res) {
  res.send('happy to be here');
});

app.get('/book', function(req, res) {
  console.log('getting all books');
  Book.find({})
    .exec(function(err, books) {
      if(err) {
        res.send('error occured')
      } else {
        console.log(books);
        res.json(books);
      }
    });
});

app.get('/book/:id', function(req, res) {
  console.log('getting all books');
  Book.findOne({
    _id: req.params.id
    })
    .exec(function(err, books) {
      if(err) {
        res.send('error occured')
      } else {
        console.log(books);
        res.json(books);
      }
    });
});

app.post('/book', function(req, res) {
  var newBook = new Book();// ref to moongooes sch

  newBook.title = req.body.title;
  newBook.author = req.body.author;
  newBook.category = req.body.category;

  newBook.save(function(err, book) {
    if(err) {
      res.send('error saving book');
    } else {
      console.log(book);
      res.send(book);
    }
  });
});

app.post('/book2', function(req, res) {
  Book.create(req.body, function(err, book) {
    if(err) {
      res.send('error saving book');
    } else {
      console.log(book);
      res.send(book);
    }
  });
});

app.put('/book/:id', function(req, res) {
  Book.findOneAndUpdate({
    _id: req.params.id
    },
    { $set: { title: req.body.title }
  }, {upsert: true}, function(err, newBook) {
    if (err) {
      res.send('error updating ');
    } else {
      console.log(newBook);
      res.send(newBook);
    }
  });
});

app.delete('/book/:id', function(req, res) {
  Book.findOneAndRemove({
    _id: req.params.id
  }, function(err, book) {
    if(err) {
      res.send('error removing')
    } else {
      console.log(book);
      res.status(204);
    }
  });
});

app.listen(port, function() {
  console.log('app listening on port ' + port);
});


